// @strict-types

#Если Сервер Тогда	 
	  
#Область СлужебныеПроцедурыИФункции

Функция СведенияОВнешнейОбработке() Экспорт
	
	ПараметрыРегестрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке();
	
	Возврат ПараметрыРегестрации;
		
КонецФункции 

Процедура ВыгрузитьВсеДанные() Экспорт
		
	Настройки = ПолучитьНастройки();
	Если Настройки = Неопределено Тогда
		Возврат;	
	КонецЕсли;
		
	МассивФайловДляОтправкинаFTP = Новый Массив; // Массив из Строка
	Настройки.Вставить("МассивФайловДляОтправкинаFTP", МассивФайловДляОтправкинаFTP);
	
	НачальноеЗаполнение();
	
	ParentCompanies(Настройки);
	Outlets(Настройки);
	LocalProducts(Настройки);
	PriceList(Настройки);
	ArchivedStocks(Настройки);
	InitStocks(Настройки);
	OutletDebts(Настройки);
	OutletPayForms(Настройки);
	
	SalOuts(Настройки);
	Orders(Настройки);
	
	Если Настройки.FTPВыгружать Тогда
	Для Каждого ИмяФайлаИсточник Из МассивФайловДляОтправкинаFTP Цикл
		РезультатОтправки = ОтправитьФайлНаFTP(Настройки, ИмяФайлаИсточник);
		Если РезультатОтправки = Истина Тогда
			ОбщегоНазначения.СообщитьПользователю(ИмяФайлаИсточник + " FTP- ОК");		
		КонецЕсли;
	КонецЦикла;
	КонецЕсли;
	   
КонецПроцедуры

Процедура Orders(Настройки)
	//TODO: Реализация
	ИмяФайла = Настройки.КаталогВыгрузки + "Orders.xml";
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ИмяФайла, "UTF-8");
    ЗаписьXML.Отступ = Истина;
	ЗаписьXML.ЗаписатьОбъявлениеXML();
		
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 100
		|	ЗаказКлиентаТовары.Ссылка КАК Ссылка,
		|	ЗаказКлиентаТовары.Ссылка.Номер КАК Номер,
		|	ЗаказКлиентаТовары.Ссылка.Дата КАК Дата,
		|	ЗаказКлиентаТовары.Ссылка.НомерПоДаннымКлиента КАК НомерПоДаннымКлиента,
		|	ВЫБОР
		|		КОГДА ЗаказКлиентаТовары.Ссылка.ЦенаВключаетНДС
		|			ТОГДА ""1""
		|		ИНАЧЕ ""0""
		|	КОНЕЦ КАК ЦенаВключаетНДС,
		|	ВЫБОР
		|		КОГДА ЗаказКлиентаТовары.Ссылка.Проведен
		|			ТОГДА ""2""
		|		ИНАЧЕ ""9""
		|	КОНЕЦ КАК Статус,
		|	&ТекущаяДата КАК ТекущаяДата,
		|	ЗаказКлиентаТовары.Номенклатура КАК Номенклатура,
		|	ЗаказКлиентаТовары.Количество КАК Количество,
		|	ЗаказКлиентаТовары.Цена КАК Цена,
		|	ЗаказКлиентаТовары.СтавкаНДС.Ставка КАК СтавкаНДС,
		|	ЗаказКлиентаТовары.Ссылка.Партнер КАК Партнер,
		|	ЗаказКлиентаТовары.Ссылка.Менеджер КАК Менеджер,
		|	ЗаказКлиентаТовары.Ссылка.ДатаОтгрузки КАК ДатаОтгрузки
		|ИЗ
		|	Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
		|ГДЕ
		|	ЗаказКлиентаТовары.Номенклатура.Производитель = &Производитель
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата
		|ИТОГИ
		|	МАКСИМУМ(Партнер),
		|	МАКСИМУМ(Менеджер),
		|	МАКСИМУМ(ДатаОтгрузки),
		|	МАКСИМУМ(Номер),
		|	МАКСИМУМ(Дата),
		|	МАКСИМУМ(ТекущаяДата)
		|ПО
		|	Ссылка";
	
	Запрос.УстановитьПараметр("Производитель", Настройки.ПроизводительБренд);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаСсылка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("ROOT"); // ROOT
	ЗаписьXML.ЗаписатьНачалоЭлемента("Orders"); // Orders
	
	Пока ВыборкаСсылка.Следующий() Цикл
		ЗаписьXML.ЗаписатьНачалоЭлемента("Order"); // Order
		
		ВнешнийКодПартнер = Настройки.СлужебныеДанные.ТаблицаПартнеры.Найти(ВыборкаСсылка.Партнер, "Партнер").ВнешнийКодПартнер;
		
		ЗаписатьРеквизитXML(ЗаписьXML, "CORDER_NO", 	СформироватьНомерЗаказа(ВыборкаСсылка.Номер, ВыборкаСсылка.Дата));
		ЗаписатьРеквизитXML(ЗаписьXML, "OL_CODE", 		ВнешнийКодПартнер);
		ЗаписатьРеквизитXML(ЗаписьXML, "MERCH_CODE", 	Настройки.ВиртуальныйТПКод);
		ЗаписатьРеквизитXML(ЗаписьXML, "MERCH_ID", 		"0");
		ЗаписатьРеквизитXML(ЗаписьXML, "DOC_TYPE", 		"2");
		ЗаписатьРеквизитXML(ЗаписьXML, "ORDER_NO", 		ВыборкаСсылка.НомерПоДаннымКлиента);
		
		ЗаписатьРеквизитXML(ЗаписьXML, "DATE", 			XMLСтрока(ВыборкаСсылка.Дата));
		ЗаписатьРеквизитXML(ЗаписьXML, "DATETO", 		XMLСтрока(ВыборкаСсылка.ДатаОтгрузки));
		ЗаписатьРеквизитXML(ЗаписьXML, "VATCALCMOD", 	ВыборкаСсылка.ЦенаВключаетНДС);
		ЗаписатьРеквизитXML(ЗаписьXML, "STATUS", 		ВыборкаСсылка.Статус);
		ЗаписатьРеквизитXML(ЗаписьXML, "DTLM",			Формат(ВыборкаСсылка.ТекущаяДата, "ДФ='yyyyMMdd HH:mm'"));
	
		ВыборкаДетальныеЗаписи = ВыборкаСсылка.Выбрать();
	
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ЗаписьXML.ЗаписатьНачалоЭлемента("OrderLocalDetail"); //OrderLocalDetail
			// Вставить обработку выборки ВыборкаДетальныеЗаписи
			ЗаписьXML.ЗаписатьКонецЭлемента(); //OrderLocalDetail
		КонецЦикла;
		ЗаписьXML.ЗаписатьКонецЭлемента(); // Order
	КонецЦикла;
	
	ЗаписьXML.ЗаписатьКонецЭлемента(); // Orders
	ЗаписьXML.ЗаписатьКонецЭлемента(); // ROOT
	
	ОбщегоНазначения.СообщитьПользователю(ИмяФайла + " - ОК");
	Настройки.МассивФайловДляОтправкинаFTP.Добавить(ИмяФайла);
	
	УдалитьФайлИзКаталога(Настройки, ИмяФайла);
	
КонецПроцедуры

Процедура OutletPayForms(Настройки)
	
	ИмяФайла = Настройки.КаталогВыгрузки + "OutletPayForms.xml";
	СвойствоПартнер = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя", "Партнеры_SalesWorks_CODE");
	СвойствоВидЦены = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя", "ВидыЦен_SalesWorks_CODE");
		
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ИмяФайла, "UTF-8");
    ЗаписьXML.Отступ = Истина;
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Партнеры.Ссылка,
	|	ЕСТЬNULL(ДополнительныеСведения.Значение, 0) КАК ПартнерВнешнийКод,
	|	&ТекущаяДата КАК ТекущаяДата,
	|	&ВидЦены,
	|	ЕСТЬNULL(ДополнительныеСведения1.Значение, 0) КАК ВидЦеныВнешнийКод
	|ИЗ
	|	Справочник.Партнеры КАК Партнеры
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	|		ПО Партнеры.Ссылка = ДополнительныеСведения.Объект
	|		И ДополнительныеСведения.Свойство = &СвойствоПартнер
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения1
	|		ПО ДополнительныеСведения1.Объект = &ВидЦены
	|		И ДополнительныеСведения1.Свойство = &СвойствоВидЦены";
	
	Запрос.УстановитьПараметр("СвойствоПартнер", СвойствоПартнер);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("СвойствоВидЦены", СвойствоВидЦены);
	Запрос.УстановитьПараметр("ВидЦены", Настройки.ВидЦены);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаИзРезультатаЗапроса = РезультатЗапроса.Выбрать();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("ROOT"); // ROOT
	ЗаписьXML.ЗаписатьНачалоЭлемента("OutletPayForms"); // OutletPayForms
	
	Пока ВыборкаИзРезультатаЗапроса.Следующий() Цикл
		
		Выборка = ТипизироватьВыборкуЗапросаOutletPayForm(ВыборкаИзРезультатаЗапроса);
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("OutletPayForm");	
	
		ЗаписатьРеквизитXML(ЗаписьXML, "OL_CODE", 		Формат(Выборка.ПартнерВнешнийКод, "ЧГ="));
		ЗаписатьРеквизитXML(ЗаписьXML, "PAYF_CODE", 	Формат(Выборка.ВидЦеныВнешнийКод, "ЧГ=")); //TODO: Код вида цены
		ЗаписатьРеквизитXML(ЗаписьXML, "PAYFORM_ID", 	"0");
		ЗаписатьРеквизитXML(ЗаписьXML, "STATUS", 		"2");
		ЗаписатьРеквизитXML(ЗаписьXML, "DTLM",			Формат(Выборка.ТекущаяДата, "ДФ='yyyyMMdd HH:mm'"));
	
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЦикла;
	                             
	ЗаписьXML.ЗаписатьКонецЭлемента(); // OutletPayForms
	ЗаписьXML.ЗаписатьКонецЭлемента(); // ROOT
	
	ЗаписьXML.Закрыть(); 
	
	ОбщегоНазначения.СообщитьПользователю(ИмяФайла + " - ОК");
	Настройки.МассивФайловДляОтправкинаFTP.Добавить(ИмяФайла);
	
	УдалитьФайлИзКаталога(Настройки, ИмяФайла);
	
КонецПроцедуры



Процедура ParentCompanies(Настройки) Экспорт
	
	//ШаблонИмениФайла = "%1%2";
	//ИмяФайла = СтрШаблон(ШаблонИмениФайла, Настройки.КаталогВыгрузки, "ParentCompanies.xml")
	
	ИмяФайла = Настройки.КаталогВыгрузки + "ParentCompanies.xml";
	
	Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя", "Контрагенты_SalesWorks_CODE");
	
	ЮрФизЛицо = Новый Массив(); // Массив из ПеречислениеСсылка.ЮрФизЛицо
	//ЮрФизЛицо.Добавить(Перечисления.ЮрФизЛицо.ЮрЛицо);
	//ЮрФизЛицо.Добавить(Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель); 
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ИмяФайла, "UTF-8");
    ЗаписьXML.Отступ = Истина;
	ЗаписьXML.ЗаписатьОбъявлениеXML();

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КонтрагентыКонтактнаяИнформация.Ссылка,
		|	КонтрагентыКонтактнаяИнформация.НомерСтроки,
		|	КонтрагентыКонтактнаяИнформация.Тип,
		|	КонтрагентыКонтактнаяИнформация.Вид,
		|	КонтрагентыКонтактнаяИнформация.Представление,
		|	КонтрагентыКонтактнаяИнформация.ЗначенияПолей,
		|	КонтрагентыКонтактнаяИнформация.Страна,
		|	КонтрагентыКонтактнаяИнформация.Регион,
		|	КонтрагентыКонтактнаяИнформация.Город,
		|	КонтрагентыКонтактнаяИнформация.АдресЭП,
		|	КонтрагентыКонтактнаяИнформация.ДоменноеИмяСервера,
		|	КонтрагентыКонтактнаяИнформация.НомерТелефона,
		|	КонтрагентыКонтактнаяИнформация.НомерТелефонаБезКодов,
		|	КонтрагентыКонтактнаяИнформация.ВидДляСписка,
		|	КонтрагентыКонтактнаяИнформация.ДействуетС,
		|	КонтрагентыКонтактнаяИнформация.Значение
		|ИЗ
		|	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Контрагенты.Ссылка КАК Ссылка,
		|	ДополнительныеСведения.Значение КАК ВнешнийКод,
		|	ВЫРАЗИТЬ(Контрагенты.Наименование КАК СТРОКА(50)) КАК Наименование,
		|	&ТекущаяДата КАК ТекущаяДата,
		|	ВЫБОР
		|		КОГДА НЕ Контрагенты.ПометкаУдаления
		|			ТОГДА ""2""
		|		ИНАЧЕ ""9""
		|	КОНЕЦ КАК Статус
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
		|		ПО Контрагенты.Ссылка = ДополнительныеСведения.Объект
		|		И ДополнительныеСведения.Свойство = &Свойство";
		//|ГДЕ
		//|	Контрагенты.ЮрФизЛицо В (&ЮрФизЛицо)";
	
	Запрос.УстановитьПараметр("Свойство", Свойство);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("ЮрФизЛицо", ЮрФизЛицо);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	КонтактнаяИнформация = ТипизироватьКонтакнуюИнформацию(РезультатЗапроса[0].Выгрузить());
	КонтактнаяИнформация.Индексы.Добавить("Ссылка,Вид");
		
	ВыборкаИзРезультатаЗапроса = РезультатЗапроса[1].Выбрать();
	Выборка = ТипизироватьВыборкуЗапросаParentCompanies(ВыборкаИзРезультатаЗапроса);
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("ROOT"); // ROOT
	ЗаписьXML.ЗаписатьНачалоЭлемента("ParentCompanies"); // ParentCompanies
	Пока Выборка.Следующий() Цикл
		
		ВнешнийКод = Формат(Выборка.ВнешнийКод, "ЧГ=");
		
		СтрокиЮрАдрес = КонтактнаяИнформация.НайтиСтроки(Новый Структура("Ссылка,Вид", Выборка.Ссылка, Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента));
		СтрокиТелефона = КонтактнаяИнформация.НайтиСтроки(Новый Структура("Ссылка,Вид", Выборка.Ссылка, Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента));
		СтрокиЭлектроннаяПочта = КонтактнаяИнформация.НайтиСтроки(Новый Структура("Ссылка,Вид", Выборка.Ссылка, Справочники.ВидыКонтактнойИнформации.EmailКонтрагента));
		ЮрАдрес = "Не указан";
		Телефон = "Не указан";
		ЭлектроннаяПочта = "Не указан";
		Если СтрокиЮрАдрес.Количество() > 0 Тогда
			ЮрАдрес = Лев(СтрокиЮрАдрес[0].Представление, 254);
		КонецЕсли;
		Если СтрокиТелефона.Количество() > 0 Тогда
			Если СтрДлина(СтрокиТелефона[0].Представление) <= 20 Тогда
				Телефон = СтрокиТелефона[0].Представление;
			КонецЕсли;
		КонецЕсли;
		Если СтрокиЭлектроннаяПочта.Количество() > 0 Тогда
			ЭлектроннаяПочта = СтрокиЭлектроннаяПочта[0].Представление
		КонецЕсли;
		
		Выборка = ТипизироватьВыборкуЗапросаParentCompanies(ВыборкаИзРезультатаЗапроса);
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("ParentCompany"); //ParentCompany		
		
		ЗаписатьРеквизитXML(ЗаписьXML, "PCOMP_CODE", 	ВнешнийКод);
		ЗаписатьРеквизитXML(ЗаписьXML, "PC_NAME", 		Выборка.Наименование);
		ЗаписатьРеквизитXML(ЗаписьXML, "PC_ADDR",		Лев(ЮрАдрес, 80));
		ЗаписатьРеквизитXML(ЗаписьXML, "PC_ZKPO",		"");
		ЗаписатьРеквизитXML(ЗаписьXML, "PC_TAX_NUM",	"");
		ЗаписатьРеквизитXML(ЗаписьXML, "PC_VAT_NUM",	"");
		ЗаписатьРеквизитXML(ЗаписьXML, "PC_B_NAME",		"");
		ЗаписатьРеквизитXML(ЗаписьXML, "PC_B_MFO",		"");
		ЗаписатьРеквизитXML(ЗаписьXML, "PC_B_ACC",		"");
		ЗаписатьРеквизитXML(ЗаписьXML, "DTLM",			Формат(Выборка.ТекущаяДата, "ДФ='yyyyMMdd HH:mm'"));
		ЗаписатьРеквизитXML(ЗаписьXML, "STATUS",		"2"); // TODO: Удалить после начала обмена. Изначально грузим все в статусе 2
		ЗаписатьРеквизитXML(ЗаписьXML, "PC_DIRECT",		"");
		ЗаписатьРеквизитXML(ЗаписьXML, "PC_PHONE",		Телефон);
		ЗаписатьРеквизитXML(ЗаписьXML, "PC_FAX",		"");
		ЗаписатьРеквизитXML(ЗаписьXML, "PC_EMAIL",		ЭлектроннаяПочта);	
		ЗаписатьРеквизитXML(ЗаписьXML, "PC_ACCOUNT",	"");
		ЗаписатьРеквизитXML(ЗаписьXML, "PC_ACC_PH",		"");
		ЗаписатьРеквизитXML(ЗаписьXML, "PC_MMANAG",		"");
		ЗаписатьРеквизитXML(ЗаписьXML, "PC_MM_PH",		"");
		ЗаписатьРеквизитXML(ЗаписьXML, "PC_PMANAG",		"");
		// ЗаписатьРеквизитXML(ЗаписьXML, "STATUS",		Выборка.Статус); 
		
		ЗаписьXML.ЗаписатьКонецЭлемента(); // ParentCompany
		
		НоваяСтрокаСлужебныеДанные = Настройки.СлужебныеДанные.ТаблицаКонтрагенты.Добавить();
		//@skip-check property-return-type
		НоваяСтрокаСлужебныеДанные.ВнешнийКодКонтрагент = ВнешнийКод;
		//@skip-check property-return-type
		НоваяСтрокаСлужебныеДанные.Контрагент = Выборка.Ссылка;
		
	КонецЦикла;                              
	ЗаписьXML.ЗаписатьКонецЭлемента(); // ParentCompanies
	ЗаписьXML.ЗаписатьКонецЭлемента(); // ROOT
	
	ЗаписьXML.Закрыть(); 
	
	ОбщегоНазначения.СообщитьПользователю(ИмяФайла + " - ОК");
	Настройки.МассивФайловДляОтправкинаFTP.Добавить(ИмяФайла);
	
	УдалитьФайлИзКаталога(Настройки, ИмяФайла);
		
КонецПроцедуры

Процедура Outlets(Настройки) Экспорт
		
	ИмяФайла = Настройки.КаталогВыгрузки + "Outlets.xml";
	
	Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя", "Партнеры_SalesWorks_CODE");
	//СвойствоКонтрагенты = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя", "Контрагенты_SalesWorks_CODE");
	//
	ЮрФизЛицо = Новый Массив; // Массив из ПеречислениеСсылка.КомпанияЧастноеЛицо
	//ЮрФизЛицо.Добавить(Перечисления.КомпанияЧастноеЛицо.Компания);
	//ЮрФизЛицо.Добавить(Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель); 
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ИмяФайла, "UTF-8");
    ЗаписьXML.Отступ = Истина;
	ЗаписьXML.ЗаписатьОбъявлениеXML();

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПартнерыКонтактнаяИнформация.Ссылка КАК Ссылка,
		|	ПартнерыКонтактнаяИнформация.НомерСтроки КАК НомерСтроки,
		|	ПартнерыКонтактнаяИнформация.Тип КАК Тип,
		|	ПартнерыКонтактнаяИнформация.Вид КАК Вид,
		|	ПартнерыКонтактнаяИнформация.Представление КАК Представление,
		|	ПартнерыКонтактнаяИнформация.ЗначенияПолей КАК ЗначенияПолей,
		|	ПартнерыКонтактнаяИнформация.Страна КАК Страна,
		|	ПартнерыКонтактнаяИнформация.Регион КАК Регион,
		|	ПартнерыКонтактнаяИнформация.Город КАК Город,
		|	ПартнерыКонтактнаяИнформация.АдресЭП КАК АдресЭП,
		|	ПартнерыКонтактнаяИнформация.ДоменноеИмяСервера КАК ДоменноеИмяСервера,
		|	ПартнерыКонтактнаяИнформация.НомерТелефона КАК НомерТелефона,
		|	ПартнерыКонтактнаяИнформация.НомерТелефонаБезКодов КАК НомерТелефонаБезКодов,
		|	ПартнерыКонтактнаяИнформация.ВидДляСписка КАК ВидДляСписка,
		|	ПартнерыКонтактнаяИнформация.Значение КАК Значение
		|ИЗ
		|	Справочник.Партнеры.КонтактнаяИнформация КАК ПартнерыКонтактнаяИнформация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Партнеры.Ссылка КАК Ссылка,
		|	ДополнительныеСведения.Значение КАК ВнешнийКод,
		|	ВЫРАЗИТЬ(Партнеры.Наименование КАК СТРОКА(254)) КАК Наименование,
		|	ВЫРАЗИТЬ(Партнеры.НаименованиеПолное КАК СТРОКА(254)) КАК НаименованиеПолное,
		|	&ТекущаяДата КАК ТекущаяДата,
		|	ВЫБОР
		|		КОГДА НЕ Партнеры.ПометкаУдаления
		|			ТОГДА ""2""
		|		ИНАЧЕ ""9""
		|	КОНЕЦ КАК Статус
		|ИЗ
		|	Справочник.Партнеры КАК Партнеры
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
		|		ПО Партнеры.Ссылка = ДополнительныеСведения.Объект
		|			И (ДополнительныеСведения.Свойство = &Свойство)";
		//|ГДЕ
		//|	Партнеры.ЮрФизЛицо В(&ЮрФизЛицо)";
	
	Запрос.УстановитьПараметр("Свойство", Свойство);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("ЮрФизЛицо", ЮрФизЛицо);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	КонтактнаяИнформация = ТипизироватьКонтакнуюИнформацию(РезультатЗапроса[0].Выгрузить());
	ВыборкаИзРезультатаЗапроса = РезультатЗапроса[1].Выбрать();
	
	КонтактнаяИнформация.Индексы.Добавить("Ссылка,Вид");
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("ROOT"); // ROOT
	ЗаписьXML.ЗаписатьНачалоЭлемента("Outlets"); // Outlets
	Пока ВыборкаИзРезультатаЗапроса.Следующий() Цикл
	
		Выборка = ТипизироватьВыборкуЗапросаOutlets(ВыборкаИзРезультатаЗапроса);
				
		// TODO: Есть не оптимальность в получении контрагента партнера
		ВнешнийКодПартнер = Формат(Выборка.ВнешнийКод, "ЧГ=");
		КонтрагентПартнера = ПартнерыИКонтрагенты.ПолучитьКонтрагентаПартнераПоУмолчанию(Выборка.Ссылка);
		ВнешнийКодКонтрагента = "0";
		Если НЕ КонтрагентПартнера.Пустая() Тогда
			//@skip-check statement-type-change
			//@skip-check property-return-type
			ВнешнийКодКонтрагента = Настройки.СлужебныеДанные.ТаблицаКонтрагенты.Найти(КонтрагентПартнера, "Контрагент").ВнешнийКодКонтрагент;
		КонецЕсли;

		ЗаписьXML.ЗаписатьНачалоЭлемента("Outlet"); //Outlet
		
		СтрокиАдрес = КонтактнаяИнформация.НайтиСтроки(Новый Структура("Ссылка,Вид", Выборка.Ссылка, Справочники.ВидыКонтактнойИнформации.АдресПартнера));
		СтрокиАдресДоставки = КонтактнаяИнформация.НайтиСтроки(Новый Структура("Ссылка,Вид", Выборка.Ссылка, Справочники.ВидыКонтактнойИнформации.АдресПартнера));
		СтрокиТелефона = КонтактнаяИнформация.НайтиСтроки(Новый Структура("Ссылка,Вид", Выборка.Ссылка, Справочники.ВидыКонтактнойИнформации.ТелефонПартнера));
		СтрокиЭлектроннаяПочта = КонтактнаяИнформация.НайтиСтроки(Новый Структура("Ссылка,Вид", Выборка.Ссылка, Справочники.ВидыКонтактнойИнформации.EmailПартнера));
		Адрес = "Не указан";
		АдресДоставки = "Не указан";
		Телефон = "-";
		ЭлектроннаяПочта = "-";
		Если СтрокиАдрес.Количество() > 0 Тогда
			Адрес = Лев(СтрокиАдрес[0].Представление, 254);
		КонецЕсли;
		Если СтрокиАдресДоставки.Количество() > 0 Тогда
			АдресДоставки = Лев(СтрокиАдресДоставки[0].Представление, 254);
		КонецЕсли;
		Если СтрокиТелефона.Количество() > 0 Тогда
			Телефон = Лев(СтрокиТелефона[0].Представление, 20);
		КонецЕсли;
		Если СтрокиЭлектроннаяПочта.Количество() > 0 Тогда
			ЭлектроннаяПочта = СтрокиЭлектроннаяПочта[0].Представление
		КонецЕсли;
		
		ЗаписатьРеквизитXML(ЗаписьXML, "OL_CODE", 		ВнешнийКодПартнер);
		ЗаписатьРеквизитXML(ЗаписьXML, "OL_ID", 		"0");
		ЗаписатьРеквизитXML(ЗаписьXML, "SUBTYPE_ID",	"0"); 
		
		// TODO: Не проходит валидацию по этому полю
		ЗаписатьРеквизитXML(ЗаписьXML, "AREA_ID",		"0");
		
		ЗаписатьРеквизитXML(ЗаписьXML, "NAME",			СокрЛП(Выборка.НаименованиеПолное));
		ЗаписатьРеквизитXML(ЗаписьXML, "TRADE_NAME",	СокрЛП(Выборка.Наименование));
		ЗаписатьРеквизитXML(ЗаписьXML, "DIRECTOR",		"-");
		ЗаписатьРеквизитXML(ЗаписьXML, "ADDRESS",		Адрес);
		ЗаписатьРеквизитXML(ЗаписьXML, "DELIV_ADDR",	АдресДоставки);
		ЗаписатьРеквизитXML(ЗаписьXML, "TELEPHONE",		Телефон);
		ЗаписатьРеквизитXML(ЗаписьXML, "FAX",			"-");
		ЗаписатьРеквизитXML(ЗаписьXML, "EMAIL",			ЭлектроннаяПочта);
		ЗаписатьРеквизитXML(ЗаписьXML, "ACCOUNTANT",	"-");
		ЗаписатьРеквизитXML(ЗаписьXML, "ACC_PHONE",		"-");
		ЗаписатьРеквизитXML(ЗаписьXML, "M_MANAGER",		"-");
		ЗаписатьРеквизитXML(ЗаписьXML, "MM_PHONE",		"-");
		ЗаписатьРеквизитXML(ЗаписьXML, "P_MANAGER",		"-");
		ЗаписатьРеквизитXML(ЗаписьXML, "OPEN_TIME",		"10:00");
		ЗаписатьРеквизитXML(ЗаписьXML, "CLOSE_TIME",	"18:00");
		ЗаписатьРеквизитXML(ЗаписьXML, "BREAK_FROM",	"00:00");
		ЗаписатьРеквизитXML(ЗаписьXML, "BREAK_TO",		"00:00");
		ЗаписатьРеквизитXML(ЗаписьXML, "DTLM",			Формат(Выборка.ТекущаяДата, "ДФ='yyyyMMdd HH:mm'"));
		ЗаписатьРеквизитXML(ЗаписьXML, "ZKPO",			"-");
		ЗаписатьРеквизитXML(ЗаписьXML, "IPN",			"Нет");
		ЗаписатьРеквизитXML(ЗаписьXML, "VATN",			"-");
		ЗаписатьРеквизитXML(ЗаписьXML, "RR",			"-");
		//ЗаписатьРеквизитXML(ЗаписьXML, "STATUS",		Выборка.Статус); TODO: Статус
		ЗаписатьРеквизитXML(ЗаписьXML, "STATUS",		"2");
		ЗаписатьРеквизитXML(ЗаписьXML, "BANKCODE",		"-");
		ЗаписатьРеквизитXML(ЗаписьXML, "BANKNAME",		"-");
		ЗаписатьРеквизитXML(ЗаписьXML, "BANKADDR",		"-");
		ЗаписатьРеквизитXML(ЗаписьXML, "OWNER_ID",		"0");
		ЗаписатьРеквизитXML(ЗаписьXML, "LIC_USAGE",		"0");
		
		ЗаписатьРеквизитXML(ЗаписьXML, "MERCH_CODE",	"");
		//ЗаписатьРеквизитXML(ЗаписьXML, "CONTR_NUM",		"");
		//ЗаписатьРеквизитXML(ЗаписьXML, "CONTR_DATE",	XMLСтрока(Дата(1,1,1)));
		//@skip-check invocation-parameter-type-intersect
		ЗаписатьРеквизитXML(ЗаписьXML, "PCOMP_CODE",	ВнешнийКодКонтрагента);
		ЗаписатьРеквизитXML(ЗаписьXML, "DC_ALLOW",		"0");
		ЗаписатьРеквизитXML(ЗаписьXML, "OLDISTCENT",	"");
		ЗаписатьРеквизитXML(ЗаписьXML, "OLDISTSHAR",	"0");
		ЗаписатьРеквизитXML(ЗаписьXML, "DC_DELIVER",	XMLСтрока(Ложь));
		ЗаписатьРеквизитXML(ЗаписьXML, "DC_PAYER",		XMLСтрока(Ложь));
		//ЗаписатьРеквизитXML(ЗаписьXML, "CNTR_DT_F",		XMLСтрока(Дата(1,1,1)));		
		
		ЗаписьXML.ЗаписатьКонецЭлемента(); // ParentCompany
		
		НоваяСтрокаСлужебныеДанные = Настройки.СлужебныеДанные.ТаблицаПартнеры.Добавить();
		//@skip-check property-return-type
		НоваяСтрокаСлужебныеДанные.ВнешнийКодКонтрагент = ВнешнийКодКонтрагента;
		//@skip-check property-return-type
		НоваяСтрокаСлужебныеДанные.ВнешнийКодПартнер = ВнешнийКодПартнер;
		//@skip-check property-return-type
		НоваяСтрокаСлужебныеДанные.Контрагент = КонтрагентПартнера;
		//@skip-check property-return-type
		НоваяСтрокаСлужебныеДанные.Партнер = Выборка.Ссылка;				
		
	КонецЦикла;                              
	ЗаписьXML.ЗаписатьКонецЭлемента(); // ParentCompanies
	ЗаписьXML.ЗаписатьКонецЭлемента(); // ROOT
	
	ЗаписьXML.Закрыть(); 
	
	ОбщегоНазначения.СообщитьПользователю(ИмяФайла + " - ОК");
	Настройки.МассивФайловДляОтправкинаFTP.Добавить(ИмяФайла);
	
	УдалитьФайлИзКаталога(Настройки, ИмяФайла);
	
КонецПроцедуры

Процедура LocalProducts(Настройки) Экспорт
		
	ИмяФайла = Настройки.КаталогВыгрузки + "LocalProducts.xml";
	
	Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя", "Номенклатура_SalesWorks_CODE");
	
	ЮрФизЛицо = Новый Массив; // Массив из ПеречислениеСсылка.КомпанияЧастноеЛицо
	ЮрФизЛицо.Добавить(Перечисления.КомпанияЧастноеЛицо.Компания);
	//ЮрФизЛицо.Добавить(Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель); 
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ИмяФайла, "UTF-8");
    ЗаписьXML.Отступ = Истина;
	ЗаписьXML.ЗаписатьОбъявлениеXML();

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Ссылка,
		|	Номенклатура.Артикул КАК Артикул,
		|	ДополнительныеСведения.Значение КАК ВнешнийКод,
		|	ВЫРАЗИТЬ(Номенклатура.Наименование КАК СТРОКА(50)) КАК Наименование,
		|	ВЫРАЗИТЬ(Номенклатура.НаименованиеПолное КАК СТРОКА(150)) КАК НаименованиеПолное,
		|	&ТекущаяДата КАК ТекущаяДата,
		|	ВЫБОР
		|		КОГДА НЕ Номенклатура.ПометкаУдаления
		|			ТОГДА ""2""
		|		ИНАЧЕ ""9""
		|	КОНЕЦ КАК Статус,
		|	Номенклатура.ВесЧислитель КАК ВесЧислитель,
		|	Номенклатура.ВесЗнаменатель КАК ВесЗнаменатель,
		|	Номенклатура.Кратность_до КАК КоличествоВУпаковке
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
		|		ПО Номенклатура.Ссылка = ДополнительныеСведения.Объект
		|			И (ДополнительныеСведения.Свойство = &Свойство)
		|ГДЕ
		|	НЕ Номенклатура.ЭтоГруппа
		|	И Номенклатура.Производитель = &ПроизводительБренд";
	
	Запрос.УстановитьПараметр("Свойство", Свойство);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("ПроизводительБренд", Настройки.ПроизводительБренд);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаИзРезультатаЗапроса = РезультатЗапроса.Выбрать();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("ROOT"); // ROOT
	ЗаписьXML.ЗаписатьНачалоЭлемента("LocalProducts"); // LocalProducts
	Пока ВыборкаИзРезультатаЗапроса.Следующий() Цикл
		
		Выборка = ТипизироватьВыборкуЗапросаLocalProducts(ВыборкаИзРезультатаЗапроса);
		ЗаписьXML.ЗаписатьНачалоЭлемента("LocalProduct"); //OutLocalProduct
		
		ЗаписатьРеквизитXML(ЗаписьXML, "LOCALCODE",		Формат(Выборка.ВнешнийКод, "ЧГ="));
		ЗаписатьРеквизитXML(ЗаписьXML, "CODE",			Выборка.Артикул);
		ЗаписатьРеквизитXML(ЗаписьXML, "NAME",			СокрЛП(Выборка.НаименованиеПолное));
		ЗаписатьРеквизитXML(ЗаписьXML, "SHORTNAME",		СокрЛП(Выборка.Наименование));
		ЗаписатьРеквизитXML(ЗаписьXML, "WEIGHT",		Формат(Выборка.ВесЧислитель, "ЧРД=.; ЧН=0; ЧГ=;"));
		ЗаписатьРеквизитXML(ЗаписьXML, "PACK_QTY",		Формат(?(ЗначениеЗаполнено(Выборка.КоличествоВУпаковке), Выборка.КоличествоВУпаковке, 1), "ЧРД=.; ЧН=0; ЧГ=;"));
		ЗаписатьРеквизитXML(ЗаписьXML, "ISMIX",			XMLСтрока(Ложь));
		ЗаписатьРеквизитXML(ЗаписьXML, "STATUS",		Выборка.Статус);
		ЗаписатьРеквизитXML(ЗаписьXML, "DTLM",			Формат(Выборка.ТекущаяДата, "ДФ='yyyyMMdd HH:mm'"));  		
		
		ЗаписьXML.ЗаписатьКонецЭлемента(); // OutLocalProductlet
	КонецЦикла;                              
	ЗаписьXML.ЗаписатьКонецЭлемента(); // LocalProducts
	ЗаписьXML.ЗаписатьКонецЭлемента(); // ROOT
	
	ЗаписьXML.Закрыть(); 
	
	ОбщегоНазначения.СообщитьПользователю(ИмяФайла + " - ОК");
	Настройки.МассивФайловДляОтправкинаFTP.Добавить(ИмяФайла);
	
	УдалитьФайлИзКаталога(Настройки, ИмяФайла);

КонецПроцедуры

Процедура PriceList(Настройки) Экспорт 
	
	ИмяФайла = Настройки.КаталогВыгрузки + "PriceList.xml";
	
	СвойствоВидыЦен = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя", "ВидыЦен_SalesWorks_CODE");
	СвойствоНоменклатура = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя", "Номенклатура_SalesWorks_CODE");
	
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ИмяФайла, "UTF-8");
    ЗаписьXML.Отступ = Истина;
	ЗаписьXML.ЗаписатьОбъявлениеXML();

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
		|	ЦеныНоменклатурыСрезПоследних.ВидЦены КАК ВидЦены,
		|	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена,
		|	ЦеныНоменклатурыСрезПоследних.ВидЦены.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
		|	ВЫБОР
		|		КОГДА НЕ ЦеныНоменклатурыСрезПоследних.ВидЦены.ПометкаУдаления
		|		И ЦеныНоменклатурыСрезПоследних.ВидЦены <> &СтатусВидЦеныДействует
		|			ТОГДА ""2""
		|		ИНАЧЕ ""9""
		|	КОНЕЦ КАК Статус
		|ПОМЕСТИТЬ ТаблицаЦен
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ТекущаяДата, Номенклатура.Производитель = &ПроизводительБренд) КАК
		|		ЦеныНоменклатурыСрезПоследних
		|ГДЕ
		|	ЦеныНоменклатурыСрезПоследних.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|	И ЦеныНоменклатурыСрезПоследних.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.Пустаяссылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаЦен.Номенклатура КАК Номенклатура,
		|	ТаблицаЦен.ВидЦены КАК ВидЦены,
		|	ТаблицаЦен.Цена КАК Цена,
		|	ЕСТЬNULL(ДополнительныеСведения.Значение, 0) КАК НоменклатураВнешнийКод,
		|	ЕСТЬNULL(ДополнительныеСведения1.Значение, 0) КАК ВидЦеныВнешнийКод,
		|	ТаблицаЦен.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
		|	ТаблицаЦен.Статус КАК Статус,
		|	&ТекущаяДата КАК ТекущаяДата
		|ИЗ
		|	ТаблицаЦен КАК ТаблицаЦен
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
		|		ПО ТаблицаЦен.Номенклатура = ДополнительныеСведения.Объект
		|		И ДополнительныеСведения.Свойство = &СвойствоНоменклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения1
		|		ПО ТаблицаЦен.ВидЦены = ДополнительныеСведения1.Объект
		|		И ДополнительныеСведения1.Свойство = &СвойствоВидыЦен";
	
	Запрос.УстановитьПараметр("СвойствоВидыЦен", СвойствоВидыЦен);
	Запрос.УстановитьПараметр("СвойствоНоменклатура", СвойствоНоменклатура);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("СтатусВидЦеныДействует", Перечисления.СтатусыДействияВидовЦен.Действует);
	Запрос.УстановитьПараметр("ПроизводительБренд", Настройки.ПроизводительБренд);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаИзРезультатаЗапроса = РезультатЗапроса.Выбрать();
	
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("ROOT"); // ROOT
	ЗаписьXML.ЗаписатьНачалоЭлемента("PricesList"); // PriceList
	Пока ВыборкаИзРезультатаЗапроса.Следующий() Цикл
		
		Выборка = ТипизироватьВыборкуЗапросаPriceList(ВыборкаИзРезультатаЗапроса);
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("PriceList"); //PriceList
		
		ЗаписатьРеквизитXML(ЗаписьXML, "CODE",			"0");
		
		// TODO: Не проходит валидацию по этому полю
		ЗаписатьРеквизитXML(ЗаписьXML, "LOCALCODE",		Формат(Выборка.НоменклатураВнешнийКод, "ЧГ="));
		
		ЗаписатьРеквизитXML(ЗаписьXML, "PAYFORM_ID",	"0");
		ЗаписатьРеквизитXML(ЗаписьXML, "PAYF_CODE",		Формат(Выборка.ВидЦеныВнешнийКод, "ЧГ="));
		ЗаписатьРеквизитXML(ЗаписьXML, "PRICE",			Формат(Выборка.Цена, "ЧРД=.; ЧГ="));
		ЗаписатьРеквизитXML(ЗаписьXML, "STATUS",		Выборка.Статус);
		ЗаписатьРеквизитXML(ЗаписьXML, "DTLM",			Формат(Выборка.ТекущаяДата, "ДФ='yyyyMMdd HH:mm'"));
		
		ЗаписьXML.ЗаписатьКонецЭлемента(); // PriceList
	КонецЦикла;                              
	ЗаписьXML.ЗаписатьКонецЭлемента(); // PricesList
	ЗаписьXML.ЗаписатьКонецЭлемента(); // ROOT
	
	ЗаписьXML.Закрыть(); 
	
	ОбщегоНазначения.СообщитьПользователю(ИмяФайла + " - ОК");
	Настройки.МассивФайловДляОтправкинаFTP.Добавить(ИмяФайла);
	
	УдалитьФайлИзКаталога(Настройки, ИмяФайла);
	
КонецПроцедуры

Процедура ArchivedStocks(Настройки) Экспорт
		
	ИмяФайла = Настройки.КаталогВыгрузки + "ArchivedStocks.xml";
	
	СвойствоНоменклаутра = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя", "Номенклатура_SalesWorks_CODE");
	СвойствоСклад = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя", "Склады_SalesWorks_CODE");
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ИмяФайла, "UTF-8");
    ЗаписьXML.Отступ = Истина;
	ЗаписьXML.ЗаписатьОбъявлениеXML();

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаНоменклатура.Ссылка КАК Ссылка,
		|	ТаблицаНоменклатура.Артикул КАК Артикул,
		|	ВЫРАЗИТЬ(ТаблицаНоменклатура.Наименование КАК СТРОКА(50)) КАК Наименование,
		|	ВЫРАЗИТЬ(ТаблицаНоменклатура.НаименованиеПолное КАК СТРОКА(150)) КАК НаименованиеПолное,
		|	&ТекущаяДата КАК ТекущаяДата,
		|	&ДатаСрезаОстатков КАК ДатаСрезаОстатков,
		|	ВЫБОР
		|		КОГДА НЕ ТаблицаНоменклатура.ПометкаУдаления
		|			ТОГДА ""2""
		|		ИНАЧЕ ""9""
		|	КОНЕЦ КАК Статус,
		|	ТаблицаНоменклатура.ВесЧислитель КАК ВесЧислитель,
		|	ТаблицаНоменклатура.ВесЗнаменатель КАК ВесЗнаменатель,
		|	ТоварыНаСкладахОстатки.Склад КАК Склад,
		|	ЕСТЬNULL(ДополнительныеСведения.Значение, 0) КАК НоменклатураВнешнийКод,
		|	ЕСТЬNULL(ДополнительныеСведения1.Значение, 0) КАК СкладВнешнийКод,
		|	ЕСТЬNULL(ТоварыНаСкладахОстатки.ВНаличииОстаток, 0) КАК ВНаличииОстаток
		|ИЗ
		|	Справочник.Номенклатура КАК ТаблицаНоменклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
		|		ПО ТаблицаНоменклатура.Ссылка = ДополнительныеСведения.Объект
		|		И ДополнительныеСведения.Свойство = &СвойствоНоменклаутра
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки(&ДатаСрезаОстатков,) КАК ТоварыНаСкладахОстатки
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения1
		|			ПО ТоварыНаСкладахОстатки.Склад = ДополнительныеСведения1.Объект
		|			И ДополнительныеСведения1.Свойство = &СвойствоСклад
		|		ПО ТоварыНаСкладахОстатки.Номенклатура = ТаблицаНоменклатура.Ссылка
		|ГДЕ
		|	НЕ ТаблицаНоменклатура.ЭтоГруппа
		|	И ТаблицаНоменклатура.Производитель = &ПроизводительБренд
		|	И ЕСТЬNULL(ТоварыНаСкладахОстатки.ВНаличииОстаток, 0) > 0";
	
	Запрос.УстановитьПараметр("СвойствоНоменклаутра", СвойствоНоменклаутра);
	Запрос.УстановитьПараметр("СвойствоСклад", СвойствоСклад);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("ДатаСрезаОстатков", НачалоДня(ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("ПроизводительБренд", Настройки.ПроизводительБренд);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаИзРезультатаЗапроса = РезультатЗапроса.Выбрать();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("ROOT"); // ROOT
	ЗаписьXML.ЗаписатьНачалоЭлемента("ArchivedLocalStocks"); // ArchivedStocks
	Пока ВыборкаИзРезультатаЗапроса.Следующий() Цикл
		
		Выборка = ТипизироватьВыборкуЗапросаArchivedStocks(ВыборкаИзРезультатаЗапроса);
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("ArchivedLocalStock"); //ArchivedLocalStock
		
		ЗаписатьРеквизитXML(ЗаписьXML, "WAREH_CODE",	Формат(Выборка.СкладВнешнийКод, "ЧГ="));
		ЗаписатьРеквизитXML(ЗаписьXML, "LOCALCODE",		Формат(Выборка.НоменклатураВнешнийКод, "ЧГ="));
		ЗаписатьРеквизитXML(ЗаписьXML, "LOT_ID",		"1");
		ЗаписатьРеквизитXML(ЗаписьXML, "DATE",			XMLСтрока(Выборка.ДатаСрезаОстатков));
		ЗаписатьРеквизитXML(ЗаписьXML, "STOCK",			Формат(Выборка.ВНаличииОстаток, "ЧРД=.; ЧН=0; ЧГ=;")); 
		ЗаписатьРеквизитXML(ЗаписьXML, "DTLM",			Формат(Выборка.ТекущаяДата, "ДФ='yyyyMMdd HH:mm'")); 
		 		
		
		ЗаписьXML.ЗаписатьКонецЭлемента(); // OutLocalProductlet
	КонецЦикла;                              
	ЗаписьXML.ЗаписатьКонецЭлемента(); // LocalProducts
	ЗаписьXML.ЗаписатьКонецЭлемента(); // ROOT
	
	ЗаписьXML.Закрыть(); 
	
	ОбщегоНазначения.СообщитьПользователю(ИмяФайла + " - ОК");	
	Настройки.МассивФайловДляОтправкинаFTP.Добавить(ИмяФайла);
	
	УдалитьФайлИзКаталога(Настройки, ИмяФайла);
	
КонецПроцедуры

Процедура InitStocks(Настройки) Экспорт
	
    ИмяФайла = Настройки.КаталогВыгрузки + "InitStocks.xml";
	
	СвойствоНоменклаутра = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя", "Номенклатура_SalesWorks_CODE");
	СвойствоСклад = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя", "Склады_SalesWorks_CODE");
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ИмяФайла, "UTF-8");
    ЗаписьXML.Отступ = Истина;
	ЗаписьXML.ЗаписатьОбъявлениеXML();

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаНоменклатура.Ссылка КАК Ссылка,
		|	ТаблицаНоменклатура.Артикул КАК Артикул,
		|	ВЫРАЗИТЬ(ТаблицаНоменклатура.Наименование КАК СТРОКА(50)) КАК Наименование,
		|	ВЫРАЗИТЬ(ТаблицаНоменклатура.НаименованиеПолное КАК СТРОКА(150)) КАК НаименованиеПолное,
		|	&ТекущаяДата КАК ТекущаяДата,
		|	&ДатаСрезаОстатков КАК ДатаСрезаОстатков,
		|	ВЫБОР
		|		КОГДА НЕ ТаблицаНоменклатура.ПометкаУдаления
		|			ТОГДА ""2""
		|		ИНАЧЕ ""9""
		|	КОНЕЦ КАК Статус,
		|	ТаблицаНоменклатура.ВесЧислитель КАК ВесЧислитель,
		|	ТаблицаНоменклатура.ВесЗнаменатель КАК ВесЗнаменатель,
		|	ТоварыНаСкладахОстатки.Склад КАК Склад,
		|	ЕСТЬNULL(ДополнительныеСведения.Значение, 0) КАК НоменклатураВнешнийКод,
		|	ЕСТЬNULL(ДополнительныеСведения1.Значение, 0) КАК СкладВнешнийКод,
		|	ЕСТЬNULL(ТоварыНаСкладахОстатки.Свободно, 0) КАК ВНаличииОстаток
		|ИЗ
		|	Справочник.Номенклатура КАК ТаблицаНоменклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
		|		ПО ТаблицаНоменклатура.Ссылка = ДополнительныеСведения.Объект
		|		И ДополнительныеСведения.Свойство = &СвойствоНоменклаутра
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаспределениеЗапасов КАК ТоварыНаСкладахОстатки
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения1
		|			ПО ТоварыНаСкладахОстатки.Склад = ДополнительныеСведения1.Объект
		|			И ДополнительныеСведения1.Свойство = &СвойствоСклад
		|		ПО ТоварыНаСкладахОстатки.Номенклатура = ТаблицаНоменклатура.Ссылка
		|		И ТоварыНаСкладахОстатки.Состояние = &СостояниеОстатка
		|ГДЕ
		|	НЕ ТаблицаНоменклатура.ЭтоГруппа
		|	И НЕ ТоварыНаСкладахОстатки.Склад ЕСТЬ NULL
		|	И ТаблицаНоменклатура.Производитель = &ПроизводительБренд
		|	И ЕСТЬNULL(ТоварыНаСкладахОстатки.Свободно, 0) > 0";
	
	Запрос.УстановитьПараметр("СвойствоНоменклаутра", СвойствоНоменклаутра);
	Запрос.УстановитьПараметр("СвойствоСклад", СвойствоСклад);              
	Запрос.УстановитьПараметр("СостояниеОстатка", Перечисления.РаспределениеЗапасовСостояния.ОстатокНаСкладе);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("ДатаСрезаОстатков", НачалоДня(ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("ПроизводительБренд", Настройки.ПроизводительБренд);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаИзРезультатаЗапроса = РезультатЗапроса.Выбрать();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("ROOT"); // ROOT
	ЗаписьXML.ЗаписатьНачалоЭлемента("InitStocks"); // InitStocks
	Пока ВыборкаИзРезультатаЗапроса.Следующий() Цикл
		
		Выборка = ТипизироватьВыборкуЗапросаInitStocks(ВыборкаИзРезультатаЗапроса);
		 
		ЗаписьXML.ЗаписатьНачалоЭлемента("InitStock"); //InitStock
		
		ЗаписатьРеквизитXML(ЗаписьXML, "WAREH_CODE",	Формат(Выборка.СкладВнешнийКод, "ЧГ="));
		ЗаписатьРеквизитXML(ЗаписьXML, "PRODCODE", 		"0");
		ЗаписатьРеквизитXML(ЗаписьXML, "LOCALCODE",		Формат(Выборка.НоменклатураВнешнийКод, "ЧГ="));
		ЗаписатьРеквизитXML(ЗаписьXML, "LOT_ID",		"1");
		ЗаписатьРеквизитXML(ЗаписьXML, "STOCK",			Формат(Выборка.ВНаличииОстаток, "ЧРД=.; ЧГ="));
		ЗаписатьРеквизитXML(ЗаписьXML, "STATUS",		Выборка.Статус);
		ЗаписатьРеквизитXML(ЗаписьXML, "DTLM",			Формат(Выборка.ТекущаяДата, "ДФ='yyyyMMdd HH:mm'")); 
		 		
		
		ЗаписьXML.ЗаписатьКонецЭлемента(); // OutLocalProductlet
	КонецЦикла;                              
	ЗаписьXML.ЗаписатьКонецЭлемента(); // LocalProducts
	ЗаписьXML.ЗаписатьКонецЭлемента(); // ROOT
	
	ЗаписьXML.Закрыть(); 
	
	ОбщегоНазначения.СообщитьПользователю(ИмяФайла + " - ОК");
	Настройки.МассивФайловДляОтправкинаFTP.Добавить(ИмяФайла);
	
	УдалитьФайлИзКаталога(Настройки, ИмяФайла);
	
КонецПроцедуры

Процедура OutletDebts(Настройки) Экспорт
		
	СвойствоПартнер = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя", "Партнеры_SalesWorks_CODE");
    ИмяФайла = Настройки.КаталогВыгрузки + "OutletDebts.xml";
		
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ИмяФайла, "UTF-8");
    ЗаписьXML.Отступ = Истина;
	ЗаписьXML.ЗаписатьОбъявлениеXML();

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РеализацияТоваровУслугТовары.Ссылка
	|ПОМЕСТИТЬ ДокументыСПродукциейПроизводителя
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|ГДЕ
	|	РеализацияТоваровУслугТовары.Номенклатура.Производитель = &ПроизводительБренд
	|СГРУППИРОВАТЬ ПО
	|	РеализацияТоваровУслугТовары.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетыСКлиентамиПоСрокамОстатки.АналитикаУчетаПоПартнерам.Партнер КАК Партнер,
	|	РасчетыСКлиентамиПоСрокамОстатки.ОбъектРасчетов КАК ОбъектРасчетов,
	|	РасчетыСКлиентамиПоСрокамОстатки.РасчетныйДокумент КАК РасчетныйДокумент,
	|	РасчетыСКлиентамиПоСрокамОстатки.ДатаПлановогоПогашения КАК ДатаПлановогоПогашения,
	|	РасчетыСКлиентамиПоСрокамОстатки.ДатаВозникновения КАК ДатаВозникновения,
	|	РасчетыСКлиентамиПоСрокамОстатки.ДолгОстаток КАК ДолгОстаток,
	|	ВЫБОР
	|		КОГДА НЕ РасчетыСКлиентамиПоСрокамОстатки.АналитикаУчетаПоПартнерам.Партнер.ПометкаУдаления
	|			ТОГДА ""2""
	|		ИНАЧЕ ""9""
	|	КОНЕЦ КАК Статус,
	|	РасчетыСКлиентамиПоСрокамОстатки.РасчетныйДокумент.Номер КАК РасчетныйДокументНомер,
	|	РасчетыСКлиентамиПоСрокамОстатки.РасчетныйДокумент.Дата КАК РасчетныйДокументДата
	|ПОМЕСТИТЬ ВременнаяТаблица
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентамиПоСрокам.Остатки(, РасчетныйДокумент В
	|		(ВЫБРАТЬ
	|			ДокументыСПродукциейПроизводителя.Ссылка КАК Ссылка
	|		ИЗ
	|			ДокументыСПродукциейПроизводителя КАК ДокументыСПродукциейПроизводителя)) КАК РасчетыСКлиентамиПоСрокамОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблица.Партнер КАК Партнер,
	|	ВременнаяТаблица.ОбъектРасчетов КАК ОбъектРасчетов,
	|	ВременнаяТаблица.РасчетныйДокумент КАК РасчетныйДокумент,
	|	ВременнаяТаблица.ДатаПлановогоПогашения КАК ДатаПлановогоПогашения,
	|	ВременнаяТаблица.ДатаВозникновения КАК ДатаВозникновения,
	|	ВременнаяТаблица.ДолгОстаток КАК ДолгОстаток,
	|	ВременнаяТаблица.Статус КАК Статус,
	|	ЕСТЬNULL(ДополнительныеСведения.Значение, 0) КАК ПартнерВнешнийКод,
	|	&ТекущаяДата КАК ТекущаяДата,
	|	ВременнаяТаблица.РасчетныйДокументНомер,
	|	ВременнаяТаблица.РасчетныйДокументДата
	|ИЗ
	|	ВременнаяТаблица КАК ВременнаяТаблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	|		ПО ВременнаяТаблица.Партнер = ДополнительныеСведения.Объект
	|		И ДополнительныеСведения.Свойство = &СвойствоПартнер
	|ИТОГИ
	|	СУММА(ДолгОстаток),
	|	МАКСИМУМ(Статус),
	|	МАКСИМУМ(ПартнерВнешнийКод),
	|	МАКСИМУМ(ТекущаяДата)
	|ПО
	|	Партнер";
	
	Запрос.УстановитьПараметр("ТекущаяДата", 		ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("СвойствоПартнер", 	СвойствоПартнер);
	Запрос.УстановитьПараметр("ПроизводительБренд", Настройки.ПроизводительБренд);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаГруппировкаПартнер = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("ROOT");
	ЗаписьXML.ЗаписатьНачалоЭлемента("OutletDebts");
	Пока ВыборкаГруппировкаПартнер.Следующий() Цикл
		
		ВыборкаПартнер = ТипизироватьВыборкуЗапросаOutletDebts(ВыборкаГруппировкаПартнер);
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("OutletDebt");
		
		ЗаписатьРеквизитXML(ЗаписьXML, "DEBT", 			Формат(ВыборкаПартнер.ДолгОстаток, "ЧРД=.; ЧГ="));
		ЗаписатьРеквизитXML(ЗаписьXML, "OL_CODE", 		Формат(ВыборкаПартнер.ПартнерВнешнийКод, "ЧГ="));
		ЗаписатьРеквизитXML(ЗаписьXML, "PAYDATE", 		XMLСтрока(НачалоДня(ТекущаяДатаСеанса())));
		ЗаписатьРеквизитXML(ЗаписьXML, "CANSALE", 		XMLСтрока(Истина));
		ЗаписатьРеквизитXML(ЗаписьXML, "AVG_AMOUNT", 	"0");
		ЗаписатьРеквизитXML(ЗаписьXML, "STATUS", 		ВыборкаПартнер.Статус);
		ЗаписатьРеквизитXML(ЗаписьXML, "DTLM",			Формат(ВыборкаПартнер.ТекущаяДата, "ДФ='yyyyMMdd HH:mm'"));
		
	Выборка = ВыборкаПартнер.Выбрать();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("OutletDebtsDetails");
	Пока Выборка.Следующий() Цикл
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("OutletDebtsDetail");
		
		ДолгПросрочен = Ложь;
		Если Выборка.ДатаПлановогоПогашения > Выборка.ТекущаяДата Тогда
			ДолгПросрочен = Истина;
		КонецЕсли;
		
		НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Выборка.РасчетныйДокументНомер);
		
		ЗаписатьРеквизитXML(ЗаписьXML, "INVOICE_NO",	НомерДокумента);
		ЗаписатьРеквизитXML(ЗаписьXML, "DEBTYPCODE",	?(ДолгПросрочен, "2", "1"));
		ЗаписатьРеквизитXML(ЗаписьXML, "DEBT",			Формат(Выборка.ДолгОстаток, "ЧРД=.; ЧГ="));
		ЗаписатьРеквизитXML(ЗаписьXML, "DATE",			XMLСтрока(Выборка.ДатаВозникновения));
		ЗаписатьРеквизитXML(ЗаписьXML, "COMMENT",		"Долг по накладной №" + НомерДокумента + " от " + Формат(Выборка.РасчетныйДокументДата, "ДФ=dd.MM.yyyy;"));
		ЗаписатьРеквизитXML(ЗаписьXML, "D_OVERDUE",		?(ДолгПросрочен, Формат(Выборка.ДолгОстаток, "ЧРД=.; ЧГ="), "0"));
		ЗаписатьРеквизитXML(ЗаписьXML, "STATUS",		Выборка.Статус);
		ЗаписатьРеквизитXML(ЗаписьXML, "DTLM",			Формат(Выборка.ТекущаяДата, "ДФ='yyyyMMdd HH:mm'")); 
		
		ЗаписьXML.ЗаписатьКонецЭлемента(); 
	КонецЦикла; 
	ЗаписьXML.ЗаписатьКонецЭлемента(); 
	
	    ЗаписьXML.ЗаписатьКонецЭлемента();                        
	КонецЦикла;                             
	 
	ЗаписьXML.ЗаписатьКонецЭлемента(); 
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.Закрыть(); 
	
	ОбщегоНазначения.СообщитьПользователю(ИмяФайла + " - ОК");
	Настройки.МассивФайловДляОтправкинаFTP.Добавить(ИмяФайла);
	
	УдалитьФайлИзКаталога(Настройки, ИмяФайла);
	
КонецПроцедуры

Процедура SalOuts(Настройки)
	ИмяФайла = Настройки.КаталогВыгрузки + "SalOuts.xml";
	
	СвойствоПартнер = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя", "Партнеры_SalesWorks_CODE");
	СвойствоСклад = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя", "Склады_SalesWorks_CODE");
	СвойствоНоменклатура = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя", "Номенклатура_SalesWorks_CODE");
	
	ШаблонНомераДокумента = "%1_%2_%3";
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ИмяФайла, "UTF-8");
    ЗаписьXML.Отступ = Истина;
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	МассивХозяйственныхОпераций = Новый Массив; // Массив из ПеречислениеСсылка.ХозяйственныеОперации
	МассивХозяйственныхОпераций.Добавить(Перечисления.ХозяйственныеОперации.РеализацияКлиенту);
	МассивХозяйственныхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВозвратТоваровОтКлиента);
	МассивХозяйственныхОпераций.Добавить(Перечисления.ХозяйственныеОперации.СписаниеТоваров);
	
	СоответсвиеТиповДокументов = Новый Соответствие; // Соответсвие из ПеречислениеСсылка.ХозяйственныеОперации
	СоответсвиеТиповДокументов.Вставить(Перечисления.ХозяйственныеОперации.РеализацияКлиенту, "2");
	СоответсвиеТиповДокументов.Вставить(Перечисления.ХозяйственныеОперации.ВозвратТоваровОтКлиента, "4");
	СоответсвиеТиповДокументов.Вставить(Перечисления.ХозяйственныеОперации.СписаниеТоваров, "5");
	
		
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВыручкаИСебестоимостьПродажОбороты.Ссылка.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
		|	ВыручкаИСебестоимостьПродажОбороты.Ссылка КАК ДокументПродажи,
		|	ВыручкаИСебестоимостьПродажОбороты.Ссылка.Номер КАК ДокументПродажиНомер,
		|	ВыручкаИСебестоимостьПродажОбороты.Ссылка.Дата КАК ДокументПродажиДата,
		|	ВыручкаИСебестоимостьПродажОбороты.Ссылка.Партнер КАК Партнер,
		|	ВыручкаИСебестоимостьПродажОбороты.Номенклатура КАК Номенклатура,
		|	ВыручкаИСебестоимостьПродажОбороты.КоличествоУпаковок КАК Количество,
		|	ВыручкаИСебестоимостьПродажОбороты.Сумма КАК Сумма,
		|	ЕСТЬNULL(ДополнительныеСведения.Значение, 0) КАК ПартнерВнешнийКод,
		|	ДополнительныеСведения1.Значение КАК СкладВнешнийКод,
		|	ЕСТЬNULL(ДополнительныеСведения2.Значение, 0) КАК НоменклатураВнешнийКод,
		|	&ТекущаяДата КАК ТекущаяДата,
		|	ВЫБОР
		|		КОГДА ВыручкаИСебестоимостьПродажОбороты.Ссылка.Проведен
		|			ТОГДА ""2""
		|		ИНАЧЕ ""9""
		|	КОНЕЦ КАК Статус,
		|	ВыручкаИСебестоимостьПродажОбороты.СтавкаНДС.Ставка КАК СтавкаНДСЧислом,
		|	ВЫБОР
		|		КОГДА ВыручкаИСебестоимостьПродажОбороты.Ссылка.ЦенаВключаетНДС
		|			ТОГДА ""1""
		|		ИНАЧЕ ""0""
		|	КОНЕЦ КАК ЦенаВключаетНДС,
		|	ВыручкаИСебестоимостьПродажОбороты.ЗаказКлиента.Номер КАК ЗаказКлиентаНомер
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Товары КАК ВыручкаИСебестоимостьПродажОбороты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
		|		ПО ДополнительныеСведения.Объект = ВыручкаИСебестоимостьПродажОбороты.Ссылка.Партнер
		|		И ДополнительныеСведения.Свойство = &СвойствоПартнер
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения1
		|		ПО ВыручкаИСебестоимостьПродажОбороты.Ссылка.Склад = ДополнительныеСведения1.Объект
		|		И ДополнительныеСведения1.Свойство = &СвойствоСклад
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения2
		|		ПО ВыручкаИСебестоимостьПродажОбороты.Номенклатура = ДополнительныеСведения2.Объект
		|		И ДополнительныеСведения2.Свойство = &СвойствоНоменклатура
		|ГДЕ
		|	ВыручкаИСебестоимостьПродажОбороты.Номенклатура.Производитель = &Производитель
		|	И ВыручкаИСебестоимостьПродажОбороты.Ссылка.ХозяйственнаяОперация В (&МассивХозяйственныхОпераций)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВозвратТоваровОтКлиентаТовары.Ссылка.ХозяйственнаяОперация,
		|	ВозвратТоваровОтКлиентаТовары.Ссылка,
		|	ВозвратТоваровОтКлиентаТовары.Ссылка.Номер,
		|	ВозвратТоваровОтКлиентаТовары.Ссылка.Дата,
		|	ВозвратТоваровОтКлиентаТовары.Ссылка.Партнер,
		|	ВозвратТоваровОтКлиентаТовары.Номенклатура,
		|	-ВозвратТоваровОтКлиентаТовары.КоличествоУпаковок,
		|	ВозвратТоваровОтКлиентаТовары.Сумма,
		|	ЕСТЬNULL(ДополнительныеСведения.Значение, 0),
		|	ДополнительныеСведения1.Значение,
		|	ЕСТЬNULL(ДополнительныеСведения2.Значение, 0),
		|	&ТекущаяДата,
		|	ВЫБОР
		|		КОГДА ВозвратТоваровОтКлиентаТовары.Ссылка.Проведен
		|			ТОГДА ""2""
		|		ИНАЧЕ ""9""
		|	КОНЕЦ,
		|	ВозвратТоваровОтКлиентаТовары.СтавкаНДС.Ставка,
		|	ВЫБОР
		|		КОГДА ВозвратТоваровОтКлиентаТовары.Ссылка.ЦенаВключаетНДС
		|			ТОГДА ""1""
		|		ИНАЧЕ ""0""
		|	КОНЕЦ,
		|	ВозвратТоваровОтКлиентаТовары.ДокументРеализации.ЗаказКлиента.Номер
		|ИЗ
		|	Документ.ВозвратТоваровОтКлиента.Товары КАК ВозвратТоваровОтКлиентаТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
		|		ПО ДополнительныеСведения.Объект = ВозвратТоваровОтКлиентаТовары.Ссылка.Партнер
		|		И ДополнительныеСведения.Свойство = &СвойствоПартнер
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения1
		|		ПО ВозвратТоваровОтКлиентаТовары.Ссылка.Склад = ДополнительныеСведения1.Объект
		|		И ДополнительныеСведения1.Свойство = &СвойствоСклад
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения2
		|		ПО ВозвратТоваровОтКлиентаТовары.Номенклатура = ДополнительныеСведения2.Объект
		|		И ДополнительныеСведения2.Свойство = &СвойствоНоменклатура
		|ГДЕ
		|	ВозвратТоваровОтКлиентаТовары.Ссылка.ХозяйственнаяОперация В (&МассивХозяйственныхОпераций)
		|	И ВозвратТоваровОтКлиентаТовары.Номенклатура.Производитель = &Производитель
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеТоваров),
		|	СписаниеНедостачТоваровТовары.Ссылка,
		|	СписаниеНедостачТоваровТовары.Ссылка.Номер,
		|	СписаниеНедостачТоваровТовары.Ссылка.Дата,
		|	ЗНАЧЕНИЕ(Справочник.Партнеры.Пустаяссылка),
		|	СписаниеНедостачТоваровТовары.Номенклатура,
		|	СписаниеНедостачТоваровТовары.Количество,
		|	0,
		|	0,
		|	ДополнительныеСведения1.Значение,
		|	ЕСТЬNULL(ДополнительныеСведения2.Значение, 0),
		|	&ТекущаяДата,
		|	ВЫБОР
		|		КОГДА СписаниеНедостачТоваровТовары.Ссылка.Проведен
		|			ТОГДА ""2""
		|		ИНАЧЕ ""9""
		|	КОНЕЦ,
		|	0,
		|	""0"",
		|	""0""
		|ИЗ
		|	Документ.СписаниеНедостачТоваров.Товары КАК СписаниеНедостачТоваровТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения1
		|		ПО СписаниеНедостачТоваровТовары.Ссылка.Склад = ДополнительныеСведения1.Объект
		|		И ДополнительныеСведения1.Свойство = &СвойствоСклад
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения2
		|		ПО СписаниеНедостачТоваровТовары.Номенклатура = ДополнительныеСведения2.Объект
		|		И ДополнительныеСведения2.Свойство = &СвойствоНоменклатура
		|ГДЕ
		|	СписаниеНедостачТоваровТовары.Номенклатура.Производитель = &Производитель
		|ИТОГИ
		|	МАКСИМУМ(ДокументПродажиНомер),
		|	МАКСИМУМ(ДокументПродажиДата),
		|	МАКСИМУМ(ПартнерВнешнийКод),
		|	МАКСИМУМ(СкладВнешнийКод),
		|	МАКСИМУМ(ТекущаяДата),
		|	МАКСИМУМ(Статус),
		|	МАКСИМУМ(ЦенаВключаетНДС),
		|	МАКСИМУМ(ЗаказКлиентаНомер)
		|ПО
		|	ХозяйственнаяОперация,
		|	ДокументПродажи";
	
	Запрос.УстановитьПараметр("МассивХозяйственныхОпераций", МассивХозяйственныхОпераций);
	Запрос.УстановитьПараметр("Производитель", Настройки.ПроизводительБренд);
	Запрос.УстановитьПараметр("СвойствоПартнер", СвойствоПартнер);
	Запрос.УстановитьПараметр("СвойствоСклад", СвойствоСклад);
	Запрос.УстановитьПараметр("СвойствоНоменклатура", СвойствоНоменклатура);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаГруппировкаХозяйственнаяОперация = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ВыборкаХозяйственнаяОперация = ТипизироватьВыборкуЗапросаSalOuts(ВыборкаГруппировкаХозяйственнаяОперация);
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("ROOT"); // ROOT
	ЗаписьXML.ЗаписатьНачалоЭлемента("SalOuts"); // SalOuts
	Пока ВыборкаХозяйственнаяОперация.Следующий() Цикл
			
		ВыборкаДокументПродажи = ВыборкаХозяйственнаяОперация.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаДокументПродажи.Следующий() Цикл
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("SalOut"); // SalOut
			
			НомерДокумента =
				СтрШаблон(ШаблонНомераДокумента,
				СоответсвиеТиповДокументов.Получить(ВыборкаХозяйственнаяОперация.ХозяйственнаяОперация),
				Формат(ВыборкаДокументПродажи.ДокументПродажиДата, "ДФ=yyyy;"), ВыборкаДокументПродажи.ДокументПродажиНомер);  
			
			ЗаписатьРеквизитXML(ЗаписьXML, "INVOICE_NO", 			НомерДокумента);
			ЗаписатьРеквизитXML(ЗаписьXML, "OL_CODE", 				Формат(ВыборкаДокументПродажи.ПартнерВнешнийКод, "ЧГ="));
			ЗаписатьРеквизитXML(ЗаписьXML, "MERCH_ID", 				"0");
			ЗаписатьРеквизитXML(ЗаписьXML, "MERCH_CODE", 			Настройки.ВиртуальныйТПКод); // TODO: ВнешнийКодТорговогоПредставители
			ЗаписатьРеквизитXML(ЗаписьXML, "DATE", 					XMLСтрока(ВыборкаДокументПродажи.ДокументПродажиДата));
			ЗаписатьРеквизитXML(ЗаписьXML, "ORDER_NO", 				ВыборкаДокументПродажи.ЗаказКлиентаНомер); // TODO: Идентификатор заказа
			ЗаписатьРеквизитXML(ЗаписьXML, "DATETO", 				XMLСтрока(ВыборкаДокументПродажи.ДокументПродажиДата));
			ЗаписатьРеквизитXML(ЗаписьXML, "PARAM1", 				"1");
			ЗаписатьРеквизитXML(ЗаписьXML, "PRINTORDER", 			"0");
			ЗаписатьРеквизитXML(ЗаписьXML, "PRINTCHECK", 			"0");
			ЗаписатьРеквизитXML(ЗаписьXML, "PRNCHKONLY", 			"0");
			ЗаписатьРеквизитXML(ЗаписьXML, "DOC_TYPE", 				СоответсвиеТиповДокументов.Получить(ВыборкаХозяйственнаяОперация.ХозяйственнаяОперация));
			ЗаписатьРеквизитXML(ЗаписьXML, "WAREH_CODE", 			Формат(ВыборкаДокументПродажи.СкладВнешнийКод, "ЧГ="));
			ЗаписатьРеквизитXML(ЗаписьXML, "VATCALCMOD", 			ВыборкаДокументПродажи.ЦенаВключаетНДС);
			
			ЗаписатьРеквизитXML(ЗаписьXML, "STATUS", 				ВыборкаДокументПродажи.Статус);
			ЗаписатьРеквизитXML(ЗаписьXML, "DTLM", 					Формат(ВыборкаДокументПродажи.ТекущаяДата, "ДФ='yyyyMMdd HH:mm'"));
			
			ВыборкаДетальныеЗаписи = ВыборкаДокументПродажи.Выбрать(); 
	
			ЗаписьXML.ЗаписатьНачалоЭлемента("SalOutLocalDetails");	// SalOutLocalDetails
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				ЗаписьXML.ЗаписатьНачалоЭлемента("SalOutLocalDetail"); // SalOutLocalDetail
			ЗаписатьРеквизитXML(ЗаписьXML, "LOCALCODE", 			Формат(ВыборкаДетальныеЗаписи.НоменклатураВнешнийКод, "ЧГ="));
			ЗаписатьРеквизитXML(ЗаписьXML, "LOT_ID", 				"1");
			ЗаписатьРеквизитXML(ЗаписьXML, "PRICE", 				Формат(ВыборкаДетальныеЗаписи.Сумма / ВыборкаДетальныеЗаписи.Количество, "ЧЦ=15; ЧДЦ=8; ЧРД=.; ЧН=0; ЧГ=;"));
			ЗаписатьРеквизитXML(ЗаписьXML, "ORDER_NO", 				ВыборкаДетальныеЗаписи.ЗаказКлиентаНомер); // TODO: Идентификатор заказа
			ЗаписатьРеквизитXML(ЗаписьXML, "QTY", 					Формат(ВыборкаДетальныеЗаписи.Количество, "ЧЦ=14; ЧДЦ=3; ЧРД=.; ЧГ=;"));
			ЗаписатьРеквизитXML(ЗаписьXML, "VAT", 					XMLСтрока(ВыборкаДетальныеЗаписи.СтавкаНДСЧислом));
			ЗаписатьРеквизитXML(ЗаписьXML, "ACCPRICE", 				"0");
			
			ЗаписатьРеквизитXML(ЗаписьXML, "STATUS", 				ВыборкаДетальныеЗаписи.Статус);
			ЗаписатьРеквизитXML(ЗаписьXML, "DTLM", 					Формат(ВыборкаДетальныеЗаписи.ТекущаяДата, "ДФ='yyyyMMdd HH:mm'"));
				ЗаписьXML.ЗаписатьКонецЭлемента(); // SalOutLocalDetail
			КонецЦикла;
			ЗаписьXML.ЗаписатьКонецЭлемента(); // SalOutLocalDetails
		
			ЗаписьXML.ЗаписатьКонецЭлемента(); // SalOut
		КонецЦикла;
	КонецЦикла;
	ЗаписьXML.ЗаписатьКонецЭлемента(); // ROOT
	ЗаписьXML.ЗаписатьКонецЭлемента(); // SalOuts
		
	ЗаписьXML.Закрыть(); 
	
	ОбщегоНазначения.СообщитьПользователю(ИмяФайла + " - ОК");
	Настройки.МассивФайловДляОтправкинаFTP.Добавить(ИмяФайла);
	
	УдалитьФайлИзКаталога(Настройки, ИмяФайла);
	
КонецПроцедуры

// Удалить файл из каталога.
// 
Процедура УдалитьФайлИзКаталога(Настройки, ИмяФайла)
	
	Если Настройки.ИспользуетсяКаталогСервера1С Тогда
		//@skip-check empty-except-statement
		Попытка
			УдалитьФайлы(ИмяФайла);
		Исключение
			//
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

// Типизировать выборку запроса parent companies.
// 
// Параметры:
// 	ВыборкаИзРезультатаЗапроса - ВыборкаИзРезультатаЗапроса
// 
// Возвращаемое значение:
//  ВыборкаИзРезультатаЗапроса - содержит имена (ключи) и значения:
//	*ВнешнийКод - Число
//	*Наименование - Строка
//	*ТекущаяДата - Дата
//	*Статус - Строка
//	*Ссылка - СправочникСсылка.Контрагенты
//
Функция ТипизироватьВыборкуЗапросаParentCompanies(ВыборкаИзРезультатаЗапроса)

	Возврат ВыборкаИзРезультатаЗапроса;

КонецФункции

// Типизировать выборку запроса Outlet Pay Form
// 
// Параметры:
// 	ВыборкаИзРезультатаЗапроса - ВыборкаИзРезультатаЗапроса
// 
// Возвращаемое значение:
//  ВыборкаИзРезультатаЗапроса - содержит имена (ключи) и значения:
//	*ПартнерВнешнийКод - Число
//	*ТекущаяДата - Дата
//	*Ссылка - СправочникСсылка.Партнеры
//	*ВидЦеныВнешнийКод - Число 
//
Функция ТипизироватьВыборкуЗапросаOutletPayForm(ВыборкаИзРезультатаЗапроса)

	Возврат ВыборкаИзРезультатаЗапроса;

КонецФункции

// Типизировать выборку запроса SalOuts.
// 
// Параметры:
// 	ВыборкаИзРезультатаЗапроса - ВыборкаИзРезультатаЗапроса
// 
// Возвращаемое значение:
//  ВыборкаИзРезультатаЗапроса - содержит имена (ключи) и значения:
//	*ДокументПродажиНомер - Строка
//	*ДокументПродажиДата - Дата
//	*ПартнерВнешнийКод - Число
//	*ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации
//	*СкладВнешнийКод - Число
//	*ТекущаяДата - Дата
//	*НоменклатураВнешнийКод - Число
//	*Сумма - Число
//	*Количество - Число
//	*СтавкаНДСЧислом - Число
//	*Статус - Строка
//	*ЦенаВключаетНДС - Строка
//	*ЗаказКлиентаНомер - Строка
//
Функция ТипизироватьВыборкуЗапросаSalOuts(ВыборкаИзРезультатаЗапроса)

	Возврат ВыборкаИзРезультатаЗапроса;

КонецФункции

// Типизировать выборку запроса Outlets.
// 
// Параметры:
// 	ВыборкаИзРезультатаЗапроса - ВыборкаИзРезультатаЗапроса
// 
// Возвращаемое значение:
//  ВыборкаИзРезультатаЗапроса - содержит имена (ключи) и значения:
//	*Ссылка - СправочникСсылка.Партнеры
//	*Наименование - Строка
//	*НаименованиеПолное - Строка
//	*ТекущаяДата - Дата
//	*Статус - Строка
//	*ВнешнийКод - Число
//
Функция ТипизироватьВыборкуЗапросаOutlets(ВыборкаИзРезультатаЗапроса)

	Возврат ВыборкаИзРезультатаЗапроса;

КонецФункции

// Типизировать выборку запроса LocalProducts.
// 
// Параметры:
// 	ВыборкаИзРезультатаЗапроса - ВыборкаИзРезультатаЗапроса
// 
// Возвращаемое значение:
//  ВыборкаИзРезультатаЗапроса - содержит имена (ключи) и значения:
//	*Артикул - Строка
//	*Наименование - Строка
//	*НаименованиеПолное - Строка
//	*ТекущаяДата - Дата
//	*ВесЧислитель - Число
//	*КоличествоВУпаковке - Число
//	*ВнешнийКод - Число
//	*Статус - Строка
//
Функция ТипизироватьВыборкуЗапросаLocalProducts(ВыборкаИзРезультатаЗапроса)

	Возврат ВыборкаИзРезультатаЗапроса;

КонецФункции

// Типизировать выборку запроса LocalProducts.
// 
// Параметры:
// 	ВыборкаИзРезультатаЗапроса - ВыборкаИзРезультатаЗапроса
// 
// Возвращаемое значение:
//  ВыборкаИзРезультатаЗапроса - содержит имена (ключи) и значения:
//	*НоменклатураВнешнийКод - Число
//	*ВидЦеныВнешнийКод - Число
//	*Цена - Число
//	*ТекущаяДата - Дата
//	*Статус - Строка
//
Функция ТипизироватьВыборкуЗапросаPriceList(ВыборкаИзРезультатаЗапроса)

	Возврат ВыборкаИзРезультатаЗапроса;

КонецФункции

// Типизировать выборку запроса ArchivedStocks.
// 
// Параметры:
// 	ВыборкаИзРезультатаЗапроса - ВыборкаИзРезультатаЗапроса
// 
// Возвращаемое значение:
//  ВыборкаИзРезультатаЗапроса - содержит имена (ключи) и значения:
//	*СкладВнешнийКод - Число
//	*НоменклатураВнешнийКод - Число
//	*ВНаличииОстаток - Число
//	*ТекущаяДата - Дата
//	*ДатаСрезаОстатков - Дата
//	*Статус - Строка
//
Функция ТипизироватьВыборкуЗапросаArchivedStocks(ВыборкаИзРезультатаЗапроса)

	Возврат ВыборкаИзРезультатаЗапроса;

КонецФункции

// Типизировать выборку запроса InitStocks.
// 
// Параметры:
// 	ВыборкаИзРезультатаЗапроса - ВыборкаИзРезультатаЗапроса
// 
// Возвращаемое значение:
//  ВыборкаИзРезультатаЗапроса - содержит имена (ключи) и значения:
//	*СкладВнешнийКод - Число
//	*НоменклатураВнешнийКод - Число
//	*ВНаличииОстаток - Число
//	*ТекущаяДата - Дата
//	*ДатаСрезаОстатков - Дата
//	*Статус - Строка
//
Функция ТипизироватьВыборкуЗапросаInitStocks(ВыборкаИзРезультатаЗапроса)

	Возврат ВыборкаИзРезультатаЗапроса;

КонецФункции

// Типизировать выборку запроса OutletDebts.
// 
// Параметры:
// 	ВыборкаИзРезультатаЗапроса - ВыборкаИзРезультатаЗапроса
// 
// Возвращаемое значение:
//  ВыборкаИзРезультатаЗапроса - содержит имена (ключи) и значения:
//	*ДолгОстаток - Число
//	*ПартнерВнешнийКод - Число
//	*ВНаличииОстаток - Число
//	*ТекущаяДата - Дата
//	*ДатаСрезаОстатков - Дата
//	*Статус - Строка
//	*ДатаПлановогоПогашения - Дата
//	*РасчетныйДокументНомер - Строка
//	*РасчетныйДокументДата - Дата
//	*ДатаВозникновения - Дата
//
Функция ТипизироватьВыборкуЗапросаOutletDebts(ВыборкаИзРезультатаЗапроса)

	Возврат ВыборкаИзРезультатаЗапроса;

КонецФункции

// Типизирует таблицу, содержащую контактную информацию нескольких объектов. 
//
// Параметры:
//    ТаблицаЗначенийКонтактнойИнформации    - ТаблицаЗначений.
//
// Возвращаемое значение:
//  ТаблицаЗначений:
//   * Объект           - ЛюбаяСсылка - владелец контактной информации.
//   * Вид              - СправочникСсылка.ВидыКонтактнойИнформации - вид контактной информации.
//   * Тип              - ПеречислениеСсылка.ТипыКонтактнойИнформации - тип контактной информации.
//   * Значение         - Строка - контактная информация во внутреннем формате JSON.
//   * Представление    - Строка - представление контактной информации.
//   * Дата             - Дата   - дата, с которой действует запись контактной информации.
//   * ИдентификаторСтрокиТабличнойЧасти - Число - идентификатор строки этой табличной части
//   * ЗначенияПолей    - Строка - устаревший XML, соответствующий XDTO пакетам КонтактнаяИнформация или Адрес. Для
//                                 обратной совместимости.
//
Функция ТипизироватьКонтакнуюИнформацию(ТаблицаЗначенийКонтактнойИнформации)

	Возврат ТаблицаЗначенийКонтактнойИнформации; 

КонецФункции

// Записать реквизит XML.
// 
// Параметры:
//  ЗаписьXML - ЗаписьXML - Запись XML
//  ИмяРеквизита - Строка - Имя реквизита
//  ЗначениеРеквизита - Строка - Значение реквизита
Процедура ЗаписатьРеквизитXML(ЗаписьXML, ИмяРеквизита, ЗначениеРеквизита)
    
    ЗаписьXML.ЗаписатьАтрибут(ИмяРеквизита, ЗначениеРеквизита);
    
КонецПроцедуры

// Получить настройки обмена.
// 
// Возвращаемое значение:
//  Структура - содержит имена (ключи) и значения:
//	*КаталогВыгрузки - Строка
//	*ПроизводительБренд - СправочникСсылка.Производители 
//	*ВиртуальныйТПКод - Строка
//	*FTPАдресСервера - Строка
//	*FTPЛогин - Строка
//	*FTPПароль - Строка
//	*FTPТаймаут - Число
//	*FTPПорт - Число
//	*ИспользуетсяКаталогСервера1С - Булево
//	*FTPВыгружать - Булево
//	*ВидЦены - СправочникСсылка.ВидыЦен
// 	* СлужебныеДанные - Структура 
//
Функция ПолучитьНастройки() Экспорт

	КлючОбъекта = "SalesWorks";
	КлючНастроек = "НастройкиSalesWorks";
	ИмяПользователя = "Администратор";
	
	СлужебныеДанные = Новый Структура;
	
	Настройки = ХранилищеОбщихНастроек.Загрузить(КлючОбъекта, КлючНастроек, ,ИмяПользователя);
	
	Если ТипЗнч(Настройки) = Тип("Структура") Тогда
		Настройки.Вставить("ИспользуетсяКаталогСервера1С", Ложь);
		//@skip-check property-return-type
		Если ЗначениеЗаполнено(Настройки.КаталогВыгрузки) Тогда
			Файл = Новый Файл(Настройки.КаталогВыгрузки);
			Если НЕ Файл.Существует() Тогда
				Настройки.Вставить("КаталогВыгрузки", КаталогВременныхФайлов());
				Настройки.Вставить("ИспользуетсяКаталогСервера1С", Истина);
			КонецЕсли;
		КонецЕсли; 
	КонецЕсли;
	
	ТаблицаКонтрагенты = Новый ТаблицаЗначений();
	ТаблицаКонтрагенты.Колонки.Добавить("Контрагент", Новый ОписаниеТипов(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Тип("СправочникСсылка.Контрагенты"))));
	ТаблицаКонтрагенты.Колонки.Добавить("ВнешнийКодКонтрагент", ОбщегоНазначения.ОписаниеТипаСтрока(36));
	
	ТаблицаПартнеры = Новый ТаблицаЗначений();
	ТаблицаПартнеры.Колонки.Добавить("Партнер", Новый ОписаниеТипов(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Тип("СправочникСсылка.Партнеры"))));
	ТаблицаПартнеры.Колонки.Добавить("ВнешнийКодПартнер", ОбщегоНазначения.ОписаниеТипаСтрока(36));
	ТаблицаПартнеры.Колонки.Добавить("Контрагент", Новый ОписаниеТипов(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Тип("СправочникСсылка.Контрагенты"))));
	ТаблицаПартнеры.Колонки.Добавить("ВнешнийКодКонтрагент", ОбщегоНазначения.ОписаниеТипаСтрока(36));
	
	СлужебныеДанные.Вставить("ТаблицаКонтрагенты", ТаблицаКонтрагенты);
	СлужебныеДанные.Вставить("ТаблицаПартнеры", ТаблицаПартнеры);
	
	Настройки.Вставить("СлужебныеДанные", СлужебныеДанные);
	
	Возврат Настройки;
	
КонецФункции

Функция ОтправитьФайлНаFTP(Настройки, ПутьКФайлу, ПутьНаСервере = "") Экспорт
    
    Попытка
        // Создаем объект для работы с FTP
        СоединениеFTP = Новый FTPСоединение(
				Настройки.FTPАдресСервера,
				Настройки.FTPПорт,
				Настройки.FTPЛогин,
				Настройки.FTPПароль,
				Неопределено,
				Истина,
				Настройки.FTPТаймаут);
                
        // Подключаемся к FTP серверу
        //СоединениеFTP.УстановитьТекущийКаталог(ПутьНаСервере);
        
        Файл = Новый Файл(ПутьКФайлу);
        ИмяФайлаПриемник = Файл.Имя; 
        
        // Отправляем файл
        СоединениеFTP.Записать(ПутьКФайлу, ИмяФайлаПриемник);
        
        Возврат Истина;
        
    Исключение
        // Обработка ошибок
        //@skip-check module-unused-local-variable
        СообщениеОбОшибке = "Ошибка при отправке файла: " + ОписаниеОшибки();
    КонецПопытки;
    
    Возврат Ложь;
    
КонецФункции

Процедура НачальноеЗаполнение() Экспорт
	
	МассивСозданных = Новый Массив; // Массив из ПланВидовХарактеристикОбъект.ДополнительныеРеквизитыИСведения
		
	// Контрагенты
	ЭлементПлана = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СоздатьЭлемент();
	ЭлементПлана.ТипЗначения = ОбщегоНазначения.ОписаниеТипаЧисло(10);
	ЭлементПлана.Наименование = "SalesWorks_CODE";
	ЭлементПлана.Виден = Истина;
	ЭлементПлана.Доступен = Истина;
	ЭлементПлана.Заголовок = "SalesWorks_CODE";
	ЭлементПлана.ИдентификаторДляФормул = "Контрагенты_SalesWorks_CODE";
	ЭлементПлана.Имя = "Контрагенты_SalesWorks_CODE";
	ЭлементПлана.НаборСвойств = НаборСвойств("Справочник_Контрагенты");
	ЭлементПлана.ЭтоДополнительноеСведение = Истина;
	ЭлементПлана.ВидСвойств = Перечисления.ВидыСвойств.ДополнительныеСведения;
	МассивСозданных.Добавить(ЭлементПлана);
	
	// Партнеры (Клиенты)
	ЭлементПлана = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СоздатьЭлемент();
	ЭлементПлана.ТипЗначения = ОбщегоНазначения.ОписаниеТипаЧисло(10);
	ЭлементПлана.Наименование = "SalesWorks_CODE";
	ЭлементПлана.Виден = Истина;
	ЭлементПлана.Доступен = Истина;
	ЭлементПлана.Заголовок = "SalesWorks_CODE";
	ЭлементПлана.ИдентификаторДляФормул = "Партнеры_SalesWorks_CODE";
	ЭлементПлана.Имя = "Партнеры_SalesWorks_CODE";
	ЭлементПлана.НаборСвойств = НаборСвойств("Справочник_Партнеры_Клиенты");
	ЭлементПлана.ЭтоДополнительноеСведение = Истина;
	ЭлементПлана.ВидСвойств = Перечисления.ВидыСвойств.ДополнительныеСведения;
	МассивСозданных.Добавить(ЭлементПлана);;
	
	// Номенклатура
	ЭлементПлана = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СоздатьЭлемент();
	ЭлементПлана.ТипЗначения = ОбщегоНазначения.ОписаниеТипаЧисло(10);
	ЭлементПлана.Наименование = "SalesWorks_CODE";
	ЭлементПлана.Виден = Истина;
	ЭлементПлана.Доступен = Истина;
	ЭлементПлана.Заголовок = "SalesWorks_CODE";
	ЭлементПлана.ИдентификаторДляФормул = "Номенклатура_SalesWorks_CODE";
	ЭлементПлана.Имя = "Номенклатура_SalesWorks_CODE";
	ЭлементПлана.НаборСвойств = НаборСвойств("Справочник_Номенклатура_Общие");
	ЭлементПлана.ЭтоДополнительноеСведение = Истина;
	ЭлементПлана.ВидСвойств = Перечисления.ВидыСвойств.ДополнительныеСведения;
	МассивСозданных.Добавить(ЭлементПлана);
	
	// Склад
	ЭлементПлана = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СоздатьЭлемент();
	ЭлементПлана.ТипЗначения = ОбщегоНазначения.ОписаниеТипаЧисло(10);
	ЭлементПлана.Наименование = "SalesWorks_CODE";
	ЭлементПлана.Виден = Истина;
	ЭлементПлана.Доступен = Истина;
	ЭлементПлана.Заголовок = "SalesWorks_CODE";
	ЭлементПлана.ИдентификаторДляФормул = "Склады_SalesWorks_CODE";
	ЭлементПлана.Имя = "Склады_SalesWorks_CODE";
	ЭлементПлана.НаборСвойств = НаборСвойств("Справочник_Склады");
	ЭлементПлана.ЭтоДополнительноеСведение = Истина;
	ЭлементПлана.ВидСвойств = Перечисления.ВидыСвойств.ДополнительныеСведения;
	МассивСозданных.Добавить(ЭлементПлана);
	
	// Виды цен
	ЭлементПлана = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СоздатьЭлемент();
	ЭлементПлана.ТипЗначения = ОбщегоНазначения.ОписаниеТипаЧисло(10);
	ЭлементПлана.Наименование = "SalesWorks_CODE";
	ЭлементПлана.Виден = Истина;
	ЭлементПлана.Доступен = Истина;
	ЭлементПлана.Заголовок = "SalesWorks_CODE";
	ЭлементПлана.ИдентификаторДляФормул = "ВидыЦен_SalesWorks_CODE";
	ЭлементПлана.Имя = "ВидыЦен_SalesWorks_CODE";
	ЭлементПлана.НаборСвойств = НаборСвойств("Справочник_ВидыЦен");
	ЭлементПлана.ЭтоДополнительноеСведение = Истина;
	ЭлементПлана.ВидСвойств = Перечисления.ВидыСвойств.ДополнительныеСведения;
	МассивСозданных.Добавить(ЭлементПлана);  
	
	// Пользователи
	ЭлементПлана = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СоздатьЭлемент();
	ЭлементПлана.ТипЗначения = ОбщегоНазначения.ОписаниеТипаЧисло(10);
	ЭлементПлана.Наименование = "SalesWorks_CODE";
	ЭлементПлана.Виден = Истина;
	ЭлементПлана.Доступен = Истина;
	ЭлементПлана.Заголовок = "SalesWorks_CODE";
	ЭлементПлана.ИдентификаторДляФормул = "Пользователи_SalesWorks_CODE";
	ЭлементПлана.Имя = "Пользователи_SalesWorks_CODE";
	ЭлементПлана.НаборСвойств = НаборСвойств("Справочник_Пользователи");
	ЭлементПлана.ЭтоДополнительноеСведение = Истина;
	ЭлементПлана.ВидСвойств = Перечисления.ВидыСвойств.ДополнительныеСведения;
	МассивСозданных.Добавить(ЭлементПлана); 
	
	НачатьТранзакцию();
	Для Каждого Элемент ИЗ МассивСозданных Цикл
		ЭлементСсылка = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя", Элемент.Имя);
		Если ЭлементСсылка.Пустая() Тогда
			 Элемент.Записать();
			 НаборОбъект = Элемент.НаборСвойств.ПолучитьОбъект();
			 СтрокаНабора = НаборОбъект.ДополнительныеСведения.Добавить();
			 СтрокаНабора.Свойство = Элемент.Ссылка;
			 НаборОбъект.Записать();
		КонецЕсли;
	КонецЦикла;
	ЗафиксироватьТранзакцию();
	
	КакиеСправочникиЗаполнять = Новый Массив; // Массив из ОбъектМетаданных
	КакиеСправочникиЗаполнять.Добавить(Метаданные.Справочники.Контрагенты);
	КакиеСправочникиЗаполнять.Добавить(Метаданные.Справочники.Партнеры);
	КакиеСправочникиЗаполнять.Добавить(Метаданные.Справочники.Номенклатура);
	КакиеСправочникиЗаполнять.Добавить(Метаданные.Справочники.Склады);
	КакиеСправочникиЗаполнять.Добавить(Метаданные.Справочники.ВидыЦен);
	КакиеСправочникиЗаполнять.Добавить(Метаданные.Справочники.Пользователи);
	
	Для Каждого ТекущийСправочник Из КакиеСправочникиЗаполнять Цикл
		
		Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя", ТекущийСправочник.Имя + "_SalesWorks_CODE");
				
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	МАКСИМУМ(ДополнительныеСведения.Значение) КАК Значение
		|ПОМЕСТИТЬ МаксимальноеЗначение
		|ИЗ
		|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
		|ГДЕ
		|	ДополнительныеСведения.Свойство = &Свойство
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Контрагенты.Ссылка КАК Ссылка,
		|	ЕСТЬNULL(ДополнительныеСведения.Значение, 0) КАК Значение,
		|	&Свойство КАК Свойство,
		|	ЕСТЬNULL(МаксимальноеЗначение.Значение, 0) КАК МаксимальноеЗначение
		|ИЗ
		|	Справочник." + ТекущийСправочник.Имя + " КАК Контрагенты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
		|		ПО Контрагенты.Ссылка = ДополнительныеСведения.Объект
		|			И (ДополнительныеСведения.Свойство = &Свойство)
		|		ЛЕВОЕ СОЕДИНЕНИЕ МаксимальноеЗначение КАК МаксимальноеЗначение
		|		ПО (ИСТИНА)
		|ГДЕ
		|	ЕСТЬNULL(ДополнительныеСведения.Значение, 0) = 0
		|	И НЕ Контрагенты.ПометкаУдаления";
		
		Запрос.УстановитьПараметр("Свойство", Свойство);
		
		//@skip-check query-in-loop
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		ПерваяСтрока = Истина;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			Если ПерваяСтрока Тогда
				//@skip-check property-return-type
				СледующийКод = ВыборкаДетальныеЗаписи.МаксимальноеЗначение + 1;
				ПерваяСтрока = Ложь;
			КонецЕсли;
			
			МенеджерЗаписи = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
			//@skip-check property-return-type
			//@skip-check statement-type-change
			МенеджерЗаписи.Объект = ВыборкаДетальныеЗаписи.Ссылка;
			//@skip-check property-return-type
			//@skip-check statement-type-change
			МенеджерЗаписи.Свойство = ВыборкаДетальныеЗаписи.Свойство;
			МенеджерЗаписи.Значение = СледующийКод;
			
			МенеджерЗаписи.Записать();
			
			СледующийКод = СледующийКод + 1;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры


// Набор свойств.
// 
// Параметры:
//  ИмяПредопределенногоНабора - Строка - Имя предопределенного набора
// 
// Возвращаемое значение:
// СправочникСсылка.НаборыДополнительныхРеквизитовИСведений 
Функция НаборСвойств(ИмяПредопределенногоНабора)
	
	СтруктураРезуьтат = Новый Структура("Ссылка", Справочники.НаборыДополнительныхРеквизитовИСведений.ПустаяСсылка());
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НаборыДополнительныхРеквизитовИСведений.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.НаборыДополнительныхРеквизитовИСведений КАК НаборыДополнительныхРеквизитовИСведений
		|ГДЕ
		|	НаборыДополнительныхРеквизитовИСведений.Используется
		|	И НаборыДополнительныхРеквизитовИСведений.ИмяПредопределенногоНабора = &ИмяПредопределенногоНабора";
	
	Запрос.УстановитьПараметр("ИмяПредопределенногоНабора", ИмяПредопределенногоНабора);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(СтруктураРезуьтат, ВыборкаДетальныеЗаписи);
	КонецЦикла;
	
	Возврат СтруктураРезуьтат.Ссылка;
	
КонецФункции


// Сформировать номер заказа исходя из даты и номера
// 
// Параметры:
//  НомерЗаказа - Строка
//  ДатаЗаказа - Дата
// 
// Возвращаемое значение:
//  Строка
Функция СформироватьНомерЗаказа(НомерЗаказа, ДатаЗаказа)

	ШаблонТекста = "%1%2";
	НомерБезПрефиксов = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(НомерЗаказа, Истина, Истина);
	ГодЗаказа = Формат(Год(ДатаЗаказа), "ЧГ=;");
	
	Возврат СтрШаблон(ШаблонТекста, ГодЗаказа, НомерБезПрефиксов);

КонецФункции

#КонецОбласти

#КонецЕсли