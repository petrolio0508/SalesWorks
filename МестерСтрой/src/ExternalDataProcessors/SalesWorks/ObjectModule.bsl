// @strict-types

#Если Сервер Тогда	  
	  
#Область СлужебныеПроцедурыИФункции

Процедура ВыгрузитьВсеДанные() Экспорт
		
	Настройки = ПолучитьНастройки();
	Если Настройки = Неопределено Тогда
		Возврат;	
	КонецЕсли;

	ParentCompaniesНаСервере(Настройки);
	OutletsНаСервере(Настройки);
	LocalProductsНаСервере(Настройки);
	PriceListНаСервере(Настройки);
	ArchivedStocksНаСервере(Настройки);
	InitStocksНаСервере(Настройки);
	OutletDebtsНаСервере(Настройки);
	   
КонецПроцедуры

Процедура ParentCompaniesНаСервере(Настройки) Экспорт
	
	//ШаблонИмениФайла = "%1%2";
	//ИмяФайла = СтрШаблон(ШаблонИмениФайла, Настройки.КаталогВыгрузки, "ParentCompanies.xml")
	
	ИмяФайла = Настройки.КаталогВыгрузки + "ParentCompanies.xml";
	
	Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя", "Контрагенты_SalesWorks_CODE");
	
	ЮрФизЛицо = Новый Массив(); // Массив из ПеречислениеСсылка.ЮрФизЛицо
	ЮрФизЛицо.Добавить(Перечисления.ЮрФизЛицо.ЮрЛицо);
	ЮрФизЛицо.Добавить(Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель); 
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ИмяФайла, "UTF-8");
    ЗаписьXML.Отступ = Истина;
	ЗаписьXML.ЗаписатьОбъявлениеXML();

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(ДополнительныеСведения.Значение КАК ЧИСЛО(50)) КАК ВнешнийКод,
		|	ВЫРАЗИТЬ(Контрагенты.Наименование КАК СТРОКА(50)) Наименование,
		|	&ТекущаяДата КАК ТекущаяДата,
		|	ВЫБОР
		|		КОГДА НЕ Контрагенты.ПометкаУдаления
		|			ТОГДА ""2""
		|		ИНАЧЕ ""9""
		|	КОНЕЦ КАК Статус
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
		|		ПО Контрагенты.Ссылка = ДополнительныеСведения.Объект
		|			И (ДополнительныеСведения.Свойство = &Свойство)
		|ГДЕ
		|	Контрагенты.ЮрФизЛицо В(&ЮрФизЛицо)";
	
	Запрос.УстановитьПараметр("Свойство", Свойство);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("ЮрФизЛицо", ЮрФизЛицо);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаИзРезультатаЗапроса = РезультатЗапроса.Выбрать();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("ROOT"); // ROOT
	ЗаписьXML.ЗаписатьНачалоЭлемента("ParentCompanies"); // ParentCompanies
	Пока ВыборкаИзРезультатаЗапроса.Следующий() Цикл
		
		Выборка = ТипизироватьВыборкуЗапросаParentCompanies(ВыборкаИзРезультатаЗапроса);
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("ParentCompany"); //ParentCompany		
		
		ЗаписатьРеквизитXML(ЗаписьXML, "PCOMP_CODE", 	Формат(Выборка.ВнешнийКод, "ЧГ="));
		ЗаписатьРеквизитXML(ЗаписьXML, "PC_NAME", 		Выборка.Наименование);
		ЗаписатьРеквизитXML(ЗаписьXML, "DTLM",			Формат(Выборка.ТекущаяДата, "ДФ='yyyyMMdd HH:mm'"));
		ЗаписатьРеквизитXML(ЗаписьXML, "STATUS",		Выборка.Статус);
		
		ЗаписьXML.ЗаписатьКонецЭлемента(); // ParentCompany
	КонецЦикла;                              
	ЗаписьXML.ЗаписатьКонецЭлемента(); // ParentCompanies
	ЗаписьXML.ЗаписатьКонецЭлемента(); // ROOT
	
	ЗаписьXML.Закрыть(); 
	
	ОбщегоНазначения.СообщитьПользователю(ИмяФайла + " - ОК");
	
КонецПроцедуры

Процедура OutletsНаСервере(Настройки) Экспорт
		
	ИмяФайла = Настройки.КаталогВыгрузки + "Outlets.xml";
	
	Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя", "Партнеры_SalesWorks_CODE");
	
	ЮрФизЛицо = Новый Массив; // Массив из ПеречислениеСсылка.КомпанияЧастноеЛицо
	ЮрФизЛицо.Добавить(Перечисления.КомпанияЧастноеЛицо.Компания);
	//ЮрФизЛицо.Добавить(Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель); 
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ИмяФайла, "UTF-8");
    ЗаписьXML.Отступ = Истина;
	ЗаписьXML.ЗаписатьОбъявлениеXML();

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПартнерыКонтактнаяИнформация.Ссылка КАК Ссылка,
		|	ПартнерыКонтактнаяИнформация.НомерСтроки КАК НомерСтроки,
		|	ПартнерыКонтактнаяИнформация.Тип КАК Тип,
		|	ПартнерыКонтактнаяИнформация.Вид КАК Вид,
		|	ПартнерыКонтактнаяИнформация.Представление КАК Представление,
		|	ПартнерыКонтактнаяИнформация.ЗначенияПолей КАК ЗначенияПолей,
		|	ПартнерыКонтактнаяИнформация.Страна КАК Страна,
		|	ПартнерыКонтактнаяИнформация.Регион КАК Регион,
		|	ПартнерыКонтактнаяИнформация.Город КАК Город,
		|	ПартнерыКонтактнаяИнформация.АдресЭП КАК АдресЭП,
		|	ПартнерыКонтактнаяИнформация.ДоменноеИмяСервера КАК ДоменноеИмяСервера,
		|	ПартнерыКонтактнаяИнформация.НомерТелефона КАК НомерТелефона,
		|	ПартнерыКонтактнаяИнформация.НомерТелефонаБезКодов КАК НомерТелефонаБезКодов,
		|	ПартнерыКонтактнаяИнформация.ВидДляСписка КАК ВидДляСписка,
		|	ПартнерыКонтактнаяИнформация.Значение КАК Значение
		|ИЗ
		|	Справочник.Партнеры.КонтактнаяИнформация КАК ПартнерыКонтактнаяИнформация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Партнеры.Ссылка КАК Ссылка,
		|	ДополнительныеСведения.Значение КАК ВнешнийКод,
		|	ВЫРАЗИТЬ(Партнеры.Наименование КАК СТРОКА(254)) КАК Наименование,
		|	ВЫРАЗИТЬ(Партнеры.НаименованиеПолное КАК СТРОКА(254)) КАК НаименованиеПолное,
		|	&ТекущаяДата КАК ТекущаяДата,
		|	ВЫБОР
		|		КОГДА НЕ Партнеры.ПометкаУдаления
		|			ТОГДА ""2""
		|		ИНАЧЕ ""9""
		|	КОНЕЦ КАК Статус
		|ИЗ
		|	Справочник.Партнеры КАК Партнеры
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
		|		ПО Партнеры.Ссылка = ДополнительныеСведения.Объект
		|			И (ДополнительныеСведения.Свойство = &Свойство)
		|ГДЕ
		|	Партнеры.ЮрФизЛицо В(&ЮрФизЛицо)";
	
	Запрос.УстановитьПараметр("Свойство", Свойство);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("ЮрФизЛицо", ЮрФизЛицо);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	КонтактнаяИнформация = ТипизироватьКонтакнуюИнформацию(РезультатЗапроса[0].Выгрузить());
	ВыборкаИзРезультатаЗапроса = РезультатЗапроса[1].Выбрать();
	
	КонтактнаяИнформация.Индексы.Добавить("Ссылка,Вид");
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("ROOT"); // ROOT
	ЗаписьXML.ЗаписатьНачалоЭлемента("Outlets"); // Outlets
	Пока ВыборкаИзРезультатаЗапроса.Следующий() Цикл
		
		Выборка = ТипизироватьВыборкуЗапросаOutlets(ВыборкаИзРезультатаЗапроса);
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("Outlet"); //Outlet
		
		СтрокиАдрес = КонтактнаяИнформация.НайтиСтроки(Новый Структура("Ссылка,Вид", Выборка.Ссылка, Справочники.ВидыКонтактнойИнформации.АдресПартнера));
		СтрокиАдресДоставки = КонтактнаяИнформация.НайтиСтроки(Новый Структура("Ссылка,Вид", Выборка.Ссылка, Справочники.ВидыКонтактнойИнформации.АдресПартнера));
		СтрокиТелефона = КонтактнаяИнформация.НайтиСтроки(Новый Структура("Ссылка,Вид", Выборка.Ссылка, Справочники.ВидыКонтактнойИнформации.ТелефонПартнера));
		СтрокиЭлектроннаяПочта = КонтактнаяИнформация.НайтиСтроки(Новый Структура("Ссылка,Вид", Выборка.Ссылка, Справочники.ВидыКонтактнойИнформации.EmailПартнера));
		Адрес = "";
		АдресДоставки = "";
		Телефон = "-";
		ЭлектроннаяПочта = "-";
		Если СтрокиАдрес.Количество() > 0 Тогда
			Адрес = Лев(СтрокиАдрес[0].Представление, 254);
		КонецЕсли;
		Если СтрокиАдресДоставки.Количество() > 0 Тогда
			АдресДоставки = Лев(СтрокиАдресДоставки[0].Представление, 254);
		КонецЕсли;
		Если СтрокиТелефона.Количество() > 0 Тогда
			Если СтрДлина(СтрокиТелефона[0].Представление) <= 20 Тогда
				Телефон = СтрокиТелефона[0].Представление;
			КонецЕсли;
		КонецЕсли;
		Если СтрокиЭлектроннаяПочта.Количество() > 0 Тогда
			ЭлектроннаяПочта = СтрокиЭлектроннаяПочта[0].Представление
		КонецЕсли;
		
		ЗаписатьРеквизитXML(ЗаписьXML, "OL_CODE", 		Формат(Выборка.ВнешнийКод, "ЧГ="));
		ЗаписатьРеквизитXML(ЗаписьXML, "OL_ID", 		"0");
		ЗаписатьРеквизитXML(ЗаписьXML, "SUBTYPE_ID",	"0"); 
		
		// ДОДЕЛАТЬ +
		// Не проходит валидацию по этому полю
		ЗаписатьРеквизитXML(ЗаписьXML, "AREA_ID",		"0");
		// ДОДЕЛАТЬ -
		
		ЗаписатьРеквизитXML(ЗаписьXML, "NAME",			СокрЛП(Выборка.НаименованиеПолное));
		ЗаписатьРеквизитXML(ЗаписьXML, "TRADE_NAME",	СокрЛП(Выборка.Наименование));
		ЗаписатьРеквизитXML(ЗаписьXML, "DIRECTOR",		"-");
		ЗаписатьРеквизитXML(ЗаписьXML, "ADDRESS",		Адрес);
		ЗаписатьРеквизитXML(ЗаписьXML, "DELIV_ADDR",	АдресДоставки);
		ЗаписатьРеквизитXML(ЗаписьXML, "TELEPHONE",		Телефон);
		ЗаписатьРеквизитXML(ЗаписьXML, "FAX",			"-");
		ЗаписатьРеквизитXML(ЗаписьXML, "EMAIL",			ЭлектроннаяПочта);
		ЗаписатьРеквизитXML(ЗаписьXML, "ACCOUNTANT",	"-");
		ЗаписатьРеквизитXML(ЗаписьXML, "ACC_PHONE",		"-");
		ЗаписатьРеквизитXML(ЗаписьXML, "M_MANAGER",		"-");
		ЗаписатьРеквизитXML(ЗаписьXML, "MM_PHONE",		"-");
		ЗаписатьРеквизитXML(ЗаписьXML, "P_MANAGER",		"-");
		ЗаписатьРеквизитXML(ЗаписьXML, "OPEN_TIME",		"10:00");
		ЗаписатьРеквизитXML(ЗаписьXML, "CLOSE_TIME",	"18:00");
		ЗаписатьРеквизитXML(ЗаписьXML, "BREAK_FROM",	"00:00");
		ЗаписатьРеквизитXML(ЗаписьXML, "BREAK_TO",		"00:00");
		ЗаписатьРеквизитXML(ЗаписьXML, "DTLM",			Формат(Выборка.ТекущаяДата, "ДФ='yyyyMMdd HH:mm'"));
		ЗаписатьРеквизитXML(ЗаписьXML, "ZKPO",			"-");
		ЗаписатьРеквизитXML(ЗаписьXML, "IPN",			"Нет");
		ЗаписатьРеквизитXML(ЗаписьXML, "VATN",			"-");
		ЗаписатьРеквизитXML(ЗаписьXML, "RR",			"-");
		ЗаписатьРеквизитXML(ЗаписьXML, "STATUS",		Выборка.Статус);
		ЗаписатьРеквизитXML(ЗаписьXML, "BANKCODE",		"-");
		ЗаписатьРеквизитXML(ЗаписьXML, "BANKNAME",		"-");
		ЗаписатьРеквизитXML(ЗаписьXML, "BANKADDR",		"-");
		ЗаписатьРеквизитXML(ЗаписьXML, "OWNER_ID",		"0");
		ЗаписатьРеквизитXML(ЗаписьXML, "LIC_USAGE",		"0");
		
		ЗаписьXML.ЗаписатьКонецЭлемента(); // ParentCompany
	КонецЦикла;                              
	ЗаписьXML.ЗаписатьКонецЭлемента(); // ParentCompanies
	ЗаписьXML.ЗаписатьКонецЭлемента(); // ROOT
	
	ЗаписьXML.Закрыть(); 
	
	ОбщегоНазначения.СообщитьПользователю(ИмяФайла + " - ОК");
	
КонецПроцедуры

Процедура LocalProductsНаСервере(Настройки) Экспорт
		
	ИмяФайла = Настройки.КаталогВыгрузки + "LocalProducts.xml";
	
	Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя", "Номенклатура_SalesWorks_CODE");
	
	ЮрФизЛицо = Новый Массив; // Массив из ПеречислениеСсылка.КомпанияЧастноеЛицо
	ЮрФизЛицо.Добавить(Перечисления.КомпанияЧастноеЛицо.Компания);
	//ЮрФизЛицо.Добавить(Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель); 
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ИмяФайла, "UTF-8");
    ЗаписьXML.Отступ = Истина;
	ЗаписьXML.ЗаписатьОбъявлениеXML();

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Ссылка,
		|	Номенклатура.Артикул КАК Артикул,
		|	ДополнительныеСведения.Значение КАК ВнешнийКод,
		|	ВЫРАЗИТЬ(Номенклатура.Наименование КАК СТРОКА(50)) КАК Наименование,
		|	ВЫРАЗИТЬ(Номенклатура.НаименованиеПолное КАК СТРОКА(150)) КАК НаименованиеПолное,
		|	&ТекущаяДата КАК ТекущаяДата,
		|	ВЫБОР
		|		КОГДА НЕ Номенклатура.ПометкаУдаления
		|			ТОГДА ""2""
		|		ИНАЧЕ ""9""
		|	КОНЕЦ КАК Статус,
		|	Номенклатура.ВесЧислитель КАК ВесЧислитель,
		|	Номенклатура.ВесЗнаменатель КАК ВесЗнаменатель,
		|	Номенклатура.Кратность_до КАК КоличествоВУпаковке
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
		|		ПО Номенклатура.Ссылка = ДополнительныеСведения.Объект
		|			И (ДополнительныеСведения.Свойство = &Свойство)
		|ГДЕ
		|	НЕ Номенклатура.ЭтоГруппа
		|	И Номенклатура.Производитель = &ПроизводительБренд";
	
	Запрос.УстановитьПараметр("Свойство", Свойство);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("ПроизводительБренд", Настройки.ПроизводительБренд);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаИзРезультатаЗапроса = РезультатЗапроса.Выбрать();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("ROOT"); // ROOT
	ЗаписьXML.ЗаписатьНачалоЭлемента("LocalProducts"); // LocalProducts
	Пока ВыборкаИзРезультатаЗапроса.Следующий() Цикл
		
		Выборка = ТипизироватьВыборкуЗапросаLocalProducts(ВыборкаИзРезультатаЗапроса);
		ЗаписьXML.ЗаписатьНачалоЭлемента("LocalProduct"); //OutLocalProduct
		
		ЗаписатьРеквизитXML(ЗаписьXML, "LOCALCODE",		Формат(Выборка.ВнешнийКод, "ЧГ="));
		ЗаписатьРеквизитXML(ЗаписьXML, "CODE",			Выборка.Артикул);
		ЗаписатьРеквизитXML(ЗаписьXML, "NAME",			СокрЛП(Выборка.НаименованиеПолное));
		ЗаписатьРеквизитXML(ЗаписьXML, "SHORTNAME",		СокрЛП(Выборка.Наименование));
		ЗаписатьРеквизитXML(ЗаписьXML, "WEIGHT",		Формат(Выборка.ВесЧислитель, "ЧРД=.; ЧН=0; ЧГ=;"));
		ЗаписатьРеквизитXML(ЗаписьXML, "PACK_QTY",		Формат(?(ЗначениеЗаполнено(Выборка.КоличествоВУпаковке), Выборка.КоличествоВУпаковке, 1), "ЧРД=.; ЧН=0; ЧГ=;"));
		ЗаписатьРеквизитXML(ЗаписьXML, "ISMIX",			XMLСтрока(Ложь));
		ЗаписатьРеквизитXML(ЗаписьXML, "STATUS",		Выборка.Статус);
		ЗаписатьРеквизитXML(ЗаписьXML, "DTLM",			Формат(Выборка.ТекущаяДата, "ДФ='yyyyMMdd HH:mm'"));  		
		
		ЗаписьXML.ЗаписатьКонецЭлемента(); // OutLocalProductlet
	КонецЦикла;                              
	ЗаписьXML.ЗаписатьКонецЭлемента(); // LocalProducts
	ЗаписьXML.ЗаписатьКонецЭлемента(); // ROOT
	
	ЗаписьXML.Закрыть(); 
	
	ОбщегоНазначения.СообщитьПользователю(ИмяФайла + " - ОК");


КонецПроцедуры

Процедура PriceListНаСервере(Настройки) Экспорт 
	
	ИмяФайла = Настройки.КаталогВыгрузки + "PriceList.xml";
	
	СвойствоВидыЦен = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя", "ВидыЦен_SalesWorks_CODE");
	СвойствоНоменклатура = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя", "Номенклатура_SalesWorks_CODE");
	
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ИмяФайла, "UTF-8");
    ЗаписьXML.Отступ = Истина;
	ЗаписьXML.ЗаписатьОбъявлениеXML();

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
		|	ЦеныНоменклатурыСрезПоследних.ВидЦены КАК ВидЦены,
		|	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена,
		|	ЦеныНоменклатурыСрезПоследних.ВидЦены.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
		|	ВЫБОР
		|		КОГДА НЕ ЦеныНоменклатурыСрезПоследних.ВидЦены.ПометкаУдаления
		|		И ЦеныНоменклатурыСрезПоследних.ВидЦены <> &СтатусВидЦеныДействует
		|			ТОГДА ""2""
		|		ИНАЧЕ ""9""
		|	КОНЕЦ КАК Статус
		|ПОМЕСТИТЬ ТаблицаЦен
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ТекущаяДата, Номенклатура.Производитель = &ПроизводительБренд) КАК
		|		ЦеныНоменклатурыСрезПоследних
		|ГДЕ
		|	ЦеныНоменклатурыСрезПоследних.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|	И ЦеныНоменклатурыСрезПоследних.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.Пустаяссылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаЦен.Номенклатура КАК Номенклатура,
		|	ТаблицаЦен.ВидЦены КАК ВидЦены,
		|	ТаблицаЦен.Цена КАК Цена,
		|	ЕСТЬNULL(ДополнительныеСведения.Значение, 0) КАК НоменклатураВнешнийКод,
		|	ЕСТЬNULL(ДополнительныеСведения1.Значение, 0) КАК ВидЦеныВнешнийКод,
		|	ТаблицаЦен.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
		|	ТаблицаЦен.Статус КАК Статус,
		|	&ТекущаяДата КАК ТекущаяДата
		|ИЗ
		|	ТаблицаЦен КАК ТаблицаЦен
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
		|		ПО ТаблицаЦен.Номенклатура = ДополнительныеСведения.Объект
		|		И ДополнительныеСведения.Свойство = &СвойствоНоменклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения1
		|		ПО ТаблицаЦен.ВидЦены = ДополнительныеСведения1.Объект
		|		И ДополнительныеСведения1.Свойство = &СвойствоВидыЦен";
	
	Запрос.УстановитьПараметр("СвойствоВидыЦен", СвойствоВидыЦен);
	Запрос.УстановитьПараметр("СвойствоНоменклатура", СвойствоНоменклатура);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("СтатусВидЦеныДействует", Перечисления.СтатусыДействияВидовЦен.Действует);
	Запрос.УстановитьПараметр("ПроизводительБренд", Настройки.ПроизводительБренд);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаИзРезультатаЗапроса = РезультатЗапроса.Выбрать();
	
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("ROOT"); // ROOT
	ЗаписьXML.ЗаписатьНачалоЭлемента("PricesList"); // PriceList
	Пока ВыборкаИзРезультатаЗапроса.Следующий() Цикл
		
		Выборка = ТипизироватьВыборкуЗапросаPriceList(ВыборкаИзРезультатаЗапроса);
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("PriceList"); //PriceList
		
		ЗаписатьРеквизитXML(ЗаписьXML, "CODE",			"0");
		
		// ДОДЕЛАТЬ +
		// Не проходит валидацию по этому полю
		ЗаписатьРеквизитXML(ЗаписьXML, "LOCALCODE",		Формат(Выборка.НоменклатураВнешнийКод, "ЧГ="));
		// ДОДЕЛАТЬ -
		
		ЗаписатьРеквизитXML(ЗаписьXML, "PAYFORM_ID",	"0");
		ЗаписатьРеквизитXML(ЗаписьXML, "PAYF_CODE",		Формат(Выборка.ВидЦеныВнешнийКод, "ЧГ="));
		ЗаписатьРеквизитXML(ЗаписьXML, "PRICE",			Формат(Выборка.Цена, "ЧРД=.; ЧГ="));
		ЗаписатьРеквизитXML(ЗаписьXML, "STATUS",		Выборка.Статус);
		ЗаписатьРеквизитXML(ЗаписьXML, "DTLM",			Формат(Выборка.ТекущаяДата, "ДФ='yyyyMMdd HH:mm'"));
		
		ЗаписьXML.ЗаписатьКонецЭлемента(); // PriceList
	КонецЦикла;                              
	ЗаписьXML.ЗаписатьКонецЭлемента(); // PricesList
	ЗаписьXML.ЗаписатьКонецЭлемента(); // ROOT
	
	ЗаписьXML.Закрыть(); 
	
	ОбщегоНазначения.СообщитьПользователю(ИмяФайла + " - ОК");
	
КонецПроцедуры

Процедура ArchivedStocksНаСервере(Настройки) Экспорт
		
	ИмяФайла = Настройки.КаталогВыгрузки + "ArchivedStocks.xml";
	
	СвойствоНоменклаутра = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя", "Номенклатура_SalesWorks_CODE");
	СвойствоСклад = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя", "Склады_SalesWorks_CODE");
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ИмяФайла, "UTF-8");
    ЗаписьXML.Отступ = Истина;
	ЗаписьXML.ЗаписатьОбъявлениеXML();

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаНоменклатура.Ссылка КАК Ссылка,
		|	ТаблицаНоменклатура.Артикул КАК Артикул,
		|	ВЫРАЗИТЬ(ТаблицаНоменклатура.Наименование КАК СТРОКА(50)) КАК Наименование,
		|	ВЫРАЗИТЬ(ТаблицаНоменклатура.НаименованиеПолное КАК СТРОКА(150)) КАК НаименованиеПолное,
		|	&ТекущаяДата КАК ТекущаяДата,
		|	&ДатаСрезаОстатков КАК ДатаСрезаОстатков,
		|	ВЫБОР
		|		КОГДА НЕ ТаблицаНоменклатура.ПометкаУдаления
		|			ТОГДА ""2""
		|		ИНАЧЕ ""9""
		|	КОНЕЦ КАК Статус,
		|	ТаблицаНоменклатура.ВесЧислитель КАК ВесЧислитель,
		|	ТаблицаНоменклатура.ВесЗнаменатель КАК ВесЗнаменатель,
		|	ТоварыНаСкладахОстатки.Склад КАК Склад,
		|	ЕСТЬNULL(ДополнительныеСведения.Значение, 0) КАК НоменклатураВнешнийКод,
		|	ЕСТЬNULL(ДополнительныеСведения1.Значение, 0) КАК СкладВнешнийКод,
		|	ЕСТЬNULL(ТоварыНаСкладахОстатки.ВНаличииОстаток, 0) КАК ВНаличииОстаток
		|ИЗ
		|	Справочник.Номенклатура КАК ТаблицаНоменклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
		|		ПО ТаблицаНоменклатура.Ссылка = ДополнительныеСведения.Объект
		|		И ДополнительныеСведения.Свойство = &СвойствоНоменклаутра
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки(&ДатаСрезаОстатков,) КАК ТоварыНаСкладахОстатки
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения1
		|			ПО ТоварыНаСкладахОстатки.Склад = ДополнительныеСведения1.Объект
		|			И ДополнительныеСведения1.Свойство = &СвойствоСклад
		|		ПО ТоварыНаСкладахОстатки.Номенклатура = ТаблицаНоменклатура.Ссылка
		|ГДЕ
		|	НЕ ТаблицаНоменклатура.ЭтоГруппа
		|	И ТаблицаНоменклатура.Производитель = &ПроизводительБренд";
	
	Запрос.УстановитьПараметр("СвойствоНоменклаутра", СвойствоНоменклаутра);
	Запрос.УстановитьПараметр("СвойствоСклад", СвойствоСклад);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("ДатаСрезаОстатков", НачалоДня(ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("ПроизводительБренд", Настройки.ПроизводительБренд);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаИзРезультатаЗапроса = РезультатЗапроса.Выбрать();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("ROOT"); // ROOT
	ЗаписьXML.ЗаписатьНачалоЭлемента("ArchivedLocalStocks"); // ArchivedStocks
	Пока ВыборкаИзРезультатаЗапроса.Следующий() Цикл
		
		Выборка = ТипизироватьВыборкуЗапросаArchivedStocks(ВыборкаИзРезультатаЗапроса);
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("ArchivedLocalStock"); //ArchivedLocalStock
		
		ЗаписатьРеквизитXML(ЗаписьXML, "WAREH_CODE",	Формат(Выборка.СкладВнешнийКод, "ЧГ="));
		ЗаписатьРеквизитXML(ЗаписьXML, "LOCALCODE",		Формат(Выборка.НоменклатураВнешнийКод, "ЧГ="));
		ЗаписатьРеквизитXML(ЗаписьXML, "LOT_ID",		"1");
		ЗаписатьРеквизитXML(ЗаписьXML, "DATE",			XMLСтрока(Выборка.ДатаСрезаОстатков));
		ЗаписатьРеквизитXML(ЗаписьXML, "STOCK",			Формат(Выборка.ВНаличииОстаток, "ЧРД=.; ЧГ=")); 
		ЗаписатьРеквизитXML(ЗаписьXML, "DTLM",			Формат(Выборка.ТекущаяДата, "ДФ='yyyyMMdd HH:mm'")); 
		 		
		
		ЗаписьXML.ЗаписатьКонецЭлемента(); // OutLocalProductlet
	КонецЦикла;                              
	ЗаписьXML.ЗаписатьКонецЭлемента(); // LocalProducts
	ЗаписьXML.ЗаписатьКонецЭлемента(); // ROOT
	
	ЗаписьXML.Закрыть(); 
	
	ОбщегоНазначения.СообщитьПользователю(ИмяФайла + " - ОК");	
КонецПроцедуры

Процедура InitStocksНаСервере(Настройки) Экспорт
	
    ИмяФайла = Настройки.КаталогВыгрузки + "InitStocks.xml";
	
	СвойствоНоменклаутра = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя", "Номенклатура_SalesWorks_CODE");
	СвойствоСклад = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя", "Склады_SalesWorks_CODE");
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ИмяФайла, "UTF-8");
    ЗаписьXML.Отступ = Истина;
	ЗаписьXML.ЗаписатьОбъявлениеXML();

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 10
		|	ТаблицаНоменклатура.Ссылка КАК Ссылка,
		|	ТаблицаНоменклатура.Артикул КАК Артикул,
		|	ВЫРАЗИТЬ(ТаблицаНоменклатура.Наименование КАК СТРОКА(50)) КАК Наименование,
		|	ВЫРАЗИТЬ(ТаблицаНоменклатура.НаименованиеПолное КАК СТРОКА(150)) КАК НаименованиеПолное,
		|	&ТекущаяДата КАК ТекущаяДата,
		|	&ДатаСрезаОстатков КАК ДатаСрезаОстатков,
		|	ВЫБОР
		|		КОГДА НЕ ТаблицаНоменклатура.ПометкаУдаления
		|			ТОГДА ""2""
		|		ИНАЧЕ ""9""
		|	КОНЕЦ КАК Статус,
		|	ТаблицаНоменклатура.ВесЧислитель КАК ВесЧислитель,
		|	ТаблицаНоменклатура.ВесЗнаменатель КАК ВесЗнаменатель,
		|	ТоварыНаСкладахОстатки.Склад КАК Склад,
		|	ЕСТЬNULL(ДополнительныеСведения.Значение, 0) КАК НоменклатураВнешнийКод,
		|	ЕСТЬNULL(ДополнительныеСведения1.Значение, 0) КАК СкладВнешнийКод,
		|	ЕСТЬNULL(ТоварыНаСкладахОстатки.Свободно, 0) КАК ВНаличииОстаток
		|ИЗ
		|	Справочник.Номенклатура КАК ТаблицаНоменклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
		|		ПО ТаблицаНоменклатура.Ссылка = ДополнительныеСведения.Объект
		|		И ДополнительныеСведения.Свойство = &СвойствоНоменклаутра
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаспределениеЗапасов КАК ТоварыНаСкладахОстатки
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения1
		|			ПО ТоварыНаСкладахОстатки.Склад = ДополнительныеСведения1.Объект
		|			И ДополнительныеСведения1.Свойство = &СвойствоСклад
		|		ПО ТоварыНаСкладахОстатки.Номенклатура = ТаблицаНоменклатура.Ссылка
		|		И ТоварыНаСкладахОстатки.Состояние = &СостояниеОстатка
		|ГДЕ
		|	НЕ ТаблицаНоменклатура.ЭтоГруппа
		|	И НЕ ТоварыНаСкладахОстатки.Склад ЕСТЬ NULL
		|	И ТаблицаНоменклатура.Производитель = &ПроизводительБренд";
	
	Запрос.УстановитьПараметр("СвойствоНоменклаутра", СвойствоНоменклаутра);
	Запрос.УстановитьПараметр("СвойствоСклад", СвойствоСклад);              
	Запрос.УстановитьПараметр("СостояниеОстатка", Перечисления.РаспределениеЗапасовСостояния.ОстатокНаСкладе);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("ДатаСрезаОстатков", НачалоДня(ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("ПроизводительБренд", Настройки.ПроизводительБренд);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаИзРезультатаЗапроса = РезультатЗапроса.Выбрать();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("ROOT"); // ROOT
	ЗаписьXML.ЗаписатьНачалоЭлемента("InitStocks"); // InitStocks
	Пока ВыборкаИзРезультатаЗапроса.Следующий() Цикл
		
		Выборка = ТипизироватьВыборкуЗапросаInitStocks(ВыборкаИзРезультатаЗапроса);
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("InitStock"); //InitStock
		
		ЗаписатьРеквизитXML(ЗаписьXML, "WAREH_CODE",	Формат(Выборка.СкладВнешнийКод, "ЧГ="));
		ЗаписатьРеквизитXML(ЗаписьXML, "PRODCODE", 		"0");
		ЗаписатьРеквизитXML(ЗаписьXML, "LOCALCODE",		Формат(Выборка.НоменклатураВнешнийКод, "ЧГ="));
		ЗаписатьРеквизитXML(ЗаписьXML, "LOT_ID",		"1");
		ЗаписатьРеквизитXML(ЗаписьXML, "STOCK",			Формат(Выборка.ВНаличииОстаток, "ЧРД=.; ЧГ="));
		ЗаписатьРеквизитXML(ЗаписьXML, "STATUS",		Выборка.Статус);
		ЗаписатьРеквизитXML(ЗаписьXML, "DTLM",			Формат(Выборка.ТекущаяДата, "ДФ='yyyyMMdd HH:mm'")); 
		 		
		
		ЗаписьXML.ЗаписатьКонецЭлемента(); // OutLocalProductlet
	КонецЦикла;                              
	ЗаписьXML.ЗаписатьКонецЭлемента(); // LocalProducts
	ЗаписьXML.ЗаписатьКонецЭлемента(); // ROOT
	
	ЗаписьXML.Закрыть(); 
	
	ОбщегоНазначения.СообщитьПользователю(ИмяФайла + " - ОК");
	
КонецПроцедуры

Процедура OutletDebtsНаСервере(Настройки) Экспорт
		
	СвойствоПартнер = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя", "Партнеры_SalesWorks_CODE");
    ИмяФайла = Настройки.КаталогВыгрузки + "OutletDebts.xml";
		
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ИмяФайла, "UTF-8");
    ЗаписьXML.Отступ = Истина;
	ЗаписьXML.ЗаписатьОбъявлениеXML();

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 10
	|	РасчетыСКлиентамиПоСрокамОстатки.АналитикаУчетаПоПартнерам.Партнер КАК Партнер,
	|	РасчетыСКлиентамиПоСрокамОстатки.ОбъектРасчетов КАК ОбъектРасчетов,
	|	РасчетыСКлиентамиПоСрокамОстатки.РасчетныйДокумент КАК РасчетныйДокумент,
	|	РасчетыСКлиентамиПоСрокамОстатки.ДатаПлановогоПогашения КАК ДатаПлановогоПогашения,
	|	РасчетыСКлиентамиПоСрокамОстатки.ДатаВозникновения КАК ДатаВозникновения,
	|	РасчетыСКлиентамиПоСрокамОстатки.ДолгОстаток КАК ДолгОстаток,
	|	ВЫБОР
	|		КОГДА НЕ РасчетыСКлиентамиПоСрокамОстатки.АналитикаУчетаПоПартнерам.Партнер.ПометкаУдаления
	|			ТОГДА ""2""
	|		ИНАЧЕ ""9""
	|	КОНЕЦ КАК Статус,
	|	РасчетыСКлиентамиПоСрокамОстатки.РасчетныйДокумент.Номер КАК РасчетныйДокументНомер,
	|	РасчетыСКлиентамиПоСрокамОстатки.РасчетныйДокумент.Дата КАК РасчетныйДокументДата
	|ПОМЕСТИТЬ ВременнаяТаблица
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентамиПоСрокам.Остатки(, РасчетныйДокумент ССЫЛКА Документ.РеализацияТоваровУслуг) КАК
	|		РасчетыСКлиентамиПоСрокамОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблица.Партнер КАК Партнер,
	|	ВременнаяТаблица.ОбъектРасчетов КАК ОбъектРасчетов,
	|	ВременнаяТаблица.РасчетныйДокумент КАК РасчетныйДокумент,
	|	ВременнаяТаблица.ДатаПлановогоПогашения КАК ДатаПлановогоПогашения,
	|	ВременнаяТаблица.ДатаВозникновения КАК ДатаВозникновения,
	|	ВременнаяТаблица.ДолгОстаток КАК ДолгОстаток,
	|	ВременнаяТаблица.Статус КАК Статус,
	|	ЕСТЬNULL(ДополнительныеСведения.Значение, 0) КАК ПартнерВнешнийКод,
	|	&ТекущаяДата КАК ТекущаяДата,
	|	ВременнаяТаблица.РасчетныйДокументНомер,
	|	ВременнаяТаблица.РасчетныйДокументДата
	|ИЗ
	|	ВременнаяТаблица КАК ВременнаяТаблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	|		ПО ВременнаяТаблица.Партнер = ДополнительныеСведения.Объект
	|		И ДополнительныеСведения.Свойство = &СвойствоПартнер
	|ИТОГИ
	|	СУММА(ДолгОстаток),
	|	МАКСИМУМ(Статус),
	|	МАКСИМУМ(ПартнерВнешнийКод),
	|	МАКСИМУМ(ТекущаяДата)
	|ПО
	|	Партнер";
	
	Запрос.УстановитьПараметр("ТекущаяДата", 		ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("СвойствоПартнер", 	СвойствоПартнер);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаГруппировкаПартнер = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("ROOT");
	ЗаписьXML.ЗаписатьНачалоЭлемента("OutletDebts");
	Пока ВыборкаГруппировкаПартнер.Следующий() Цикл
		
		ВыборкаПартнер = ТипизироватьВыборкуЗапросаOutletDebts(ВыборкаГруппировкаПартнер);
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("OutletDebt");
		
		ЗаписатьРеквизитXML(ЗаписьXML, "DEBT", 			Формат(ВыборкаПартнер.ДолгОстаток, "ЧРД=.; ЧГ="));
		ЗаписатьРеквизитXML(ЗаписьXML, "OL_CODE", 		Формат(ВыборкаПартнер.ПартнерВнешнийКод, "ЧГ="));
		ЗаписатьРеквизитXML(ЗаписьXML, "PAYDATE", 		XMLСтрока(НачалоДня(ТекущаяДатаСеанса())));
		ЗаписатьРеквизитXML(ЗаписьXML, "CANSALE", 		XMLСтрока(Истина));
		ЗаписатьРеквизитXML(ЗаписьXML, "AVG_AMOUNT", 	"0");
		ЗаписатьРеквизитXML(ЗаписьXML, "STATUS", 		ВыборкаПартнер.Статус);
		ЗаписатьРеквизитXML(ЗаписьXML, "DTLM",			Формат(ВыборкаПартнер.ТекущаяДата, "ДФ='yyyyMMdd HH:mm'"));
		
	Выборка = ВыборкаПартнер.Выбрать();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("OutletDebtsDetails");
	Пока Выборка.Следующий() Цикл
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("OutletDebtsDetail");
		
		ДолгПросрочен = Ложь;
		Если Выборка.ДатаПлановогоПогашения > Выборка.ТекущаяДата Тогда
			ДолгПросрочен = Истина;
		КонецЕсли;
		
		НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Выборка.РасчетныйДокументНомер);
		
		ЗаписатьРеквизитXML(ЗаписьXML, "INVOICE_NO",	НомерДокумента);
		ЗаписатьРеквизитXML(ЗаписьXML, "DEBTYPCODE",	?(ДолгПросрочен, "2", "1"));
		ЗаписатьРеквизитXML(ЗаписьXML, "DEBT",			Формат(Выборка.ДолгОстаток, "ЧРД=.; ЧГ="));
		ЗаписатьРеквизитXML(ЗаписьXML, "DATE",			XMLСтрока(Выборка.ДатаВозникновения));
		ЗаписатьРеквизитXML(ЗаписьXML, "COMMENT",		"Долг по накладной №" + НомерДокумента + " от " + Формат(Выборка.РасчетныйДокументДата, "ДФ=dd.MM.yyyy;"));
		ЗаписатьРеквизитXML(ЗаписьXML, "D_OVERDUE",		?(ДолгПросрочен, Формат(Выборка.ДолгОстаток, "ЧРД=.; ЧГ="), "0"));
		ЗаписатьРеквизитXML(ЗаписьXML, "STATUS",		Выборка.Статус);
		ЗаписатьРеквизитXML(ЗаписьXML, "DTLM",			Формат(Выборка.ТекущаяДата, "ДФ='yyyyMMdd HH:mm'")); 
		
		ЗаписьXML.ЗаписатьКонецЭлемента(); 
	КонецЦикла; 
	ЗаписьXML.ЗаписатьКонецЭлемента(); 
	
	    ЗаписьXML.ЗаписатьКонецЭлемента();                        
	КонецЦикла;                             
	 
	ЗаписьXML.ЗаписатьКонецЭлемента(); 
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.Закрыть(); 
	
	ОбщегоНазначения.СообщитьПользователю(ИмяФайла + " - ОК");
	
КонецПроцедуры

// Типизировать выборку запроса parent companies.
// 
// Параметры:
// 	ВыборкаИзРезультатаЗапроса - ВыборкаИзРезультатаЗапроса
// 
// Возвращаемое значение:
//  ВыборкаИзРезультатаЗапроса - содержит имена (ключи) и значения:
//	*ВнешнийКод - Число
//	*Наименование - Строка
//	*ТекущаяДата - Дата
//	*Статус - Строка
//
Функция ТипизироватьВыборкуЗапросаParentCompanies(ВыборкаИзРезультатаЗапроса)

	Возврат ВыборкаИзРезультатаЗапроса;

КонецФункции

// Типизировать выборку запроса Outlets.
// 
// Параметры:
// 	ВыборкаИзРезультатаЗапроса - ВыборкаИзРезультатаЗапроса
// 
// Возвращаемое значение:
//  ВыборкаИзРезультатаЗапроса - содержит имена (ключи) и значения:
//	*Ссылка - СправочникСсылка.Партнеры
//	*Наименование - Строка
//	*НаименованиеПолное - Строка
//	*ТекущаяДата - Дата
//	*Статус - Строка
//	*ВнешнийКод - Число
//
Функция ТипизироватьВыборкуЗапросаOutlets(ВыборкаИзРезультатаЗапроса)

	Возврат ВыборкаИзРезультатаЗапроса;

КонецФункции

// Типизировать выборку запроса LocalProducts.
// 
// Параметры:
// 	ВыборкаИзРезультатаЗапроса - ВыборкаИзРезультатаЗапроса
// 
// Возвращаемое значение:
//  ВыборкаИзРезультатаЗапроса - содержит имена (ключи) и значения:
//	*Артикул - Строка
//	*Наименование - Строка
//	*НаименованиеПолное - Строка
//	*ТекущаяДата - Дата
//	*ВесЧислитель - Число
//	*КоличествоВУпаковке - Число
//	*ВнешнийКод - Число
//	*Статус - Строка
//
Функция ТипизироватьВыборкуЗапросаLocalProducts(ВыборкаИзРезультатаЗапроса)

	Возврат ВыборкаИзРезультатаЗапроса;

КонецФункции

// Типизировать выборку запроса LocalProducts.
// 
// Параметры:
// 	ВыборкаИзРезультатаЗапроса - ВыборкаИзРезультатаЗапроса
// 
// Возвращаемое значение:
//  ВыборкаИзРезультатаЗапроса - содержит имена (ключи) и значения:
//	*НоменклатураВнешнийКод - Число
//	*ВидЦеныВнешнийКод - Число
//	*Цена - Число
//	*ТекущаяДата - Дата
//	*Статус - Строка
//
Функция ТипизироватьВыборкуЗапросаPriceList(ВыборкаИзРезультатаЗапроса)

	Возврат ВыборкаИзРезультатаЗапроса;

КонецФункции

// Типизировать выборку запроса ArchivedStocks.
// 
// Параметры:
// 	ВыборкаИзРезультатаЗапроса - ВыборкаИзРезультатаЗапроса
// 
// Возвращаемое значение:
//  ВыборкаИзРезультатаЗапроса - содержит имена (ключи) и значения:
//	*СкладВнешнийКод - Число
//	*НоменклатураВнешнийКод - Число
//	*ВНаличииОстаток - Число
//	*ТекущаяДата - Дата
//	*ДатаСрезаОстатков - Дата
//	*Статус - Строка
//
Функция ТипизироватьВыборкуЗапросаArchivedStocks(ВыборкаИзРезультатаЗапроса)

	Возврат ВыборкаИзРезультатаЗапроса;

КонецФункции

// Типизировать выборку запроса InitStocks.
// 
// Параметры:
// 	ВыборкаИзРезультатаЗапроса - ВыборкаИзРезультатаЗапроса
// 
// Возвращаемое значение:
//  ВыборкаИзРезультатаЗапроса - содержит имена (ключи) и значения:
//	*СкладВнешнийКод - Число
//	*НоменклатураВнешнийКод - Число
//	*ВНаличииОстаток - Число
//	*ТекущаяДата - Дата
//	*ДатаСрезаОстатков - Дата
//	*Статус - Строка
//
Функция ТипизироватьВыборкуЗапросаInitStocks(ВыборкаИзРезультатаЗапроса)

	Возврат ВыборкаИзРезультатаЗапроса;

КонецФункции

// Типизировать выборку запроса OutletDebts.
// 
// Параметры:
// 	ВыборкаИзРезультатаЗапроса - ВыборкаИзРезультатаЗапроса
// 
// Возвращаемое значение:
//  ВыборкаИзРезультатаЗапроса - содержит имена (ключи) и значения:
//	*ДолгОстаток - Число
//	*ПартнерВнешнийКод - Число
//	*ВНаличииОстаток - Число
//	*ТекущаяДата - Дата
//	*ДатаСрезаОстатков - Дата
//	*Статус - Строка
//	*ДатаПлановогоПогашения - Дата
//	*РасчетныйДокументНомер - Строка
//	*РасчетныйДокументДата - Дата
//	*ДатаВозникновения - Дата
//
Функция ТипизироватьВыборкуЗапросаOutletDebts(ВыборкаИзРезультатаЗапроса)

	Возврат ВыборкаИзРезультатаЗапроса;

КонецФункции

// Типизирует таблицу, содержащую контактную информацию нескольких объектов. 
//
// Параметры:
//    ТаблицаЗначенийКонтактнойИнформации    - ТаблицаЗначений.
//
// Возвращаемое значение:
//  ТаблицаЗначений:
//   * Объект           - ЛюбаяСсылка - владелец контактной информации.
//   * Вид              - СправочникСсылка.ВидыКонтактнойИнформации - вид контактной информации.
//   * Тип              - ПеречислениеСсылка.ТипыКонтактнойИнформации - тип контактной информации.
//   * Значение         - Строка - контактная информация во внутреннем формате JSON.
//   * Представление    - Строка - представление контактной информации.
//   * Дата             - Дата   - дата, с которой действует запись контактной информации.
//   * ИдентификаторСтрокиТабличнойЧасти - Число - идентификатор строки этой табличной части
//   * ЗначенияПолей    - Строка - устаревший XML, соответствующий XDTO пакетам КонтактнаяИнформация или Адрес. Для
//                                 обратной совместимости.
//
Функция ТипизироватьКонтакнуюИнформацию(ТаблицаЗначенийКонтактнойИнформации)

	Возврат ТаблицаЗначенийКонтактнойИнформации; 

КонецФункции

// Записать реквизит XML.
// 
// Параметры:
//  ЗаписьXML - ЗаписьXML - Запись XML
//  ИмяРеквизита - Строка - Имя реквизита
//  ЗначениеРеквизита - Строка - Значение реквизита
Процедура ЗаписатьРеквизитXML(ЗаписьXML, ИмяРеквизита, ЗначениеРеквизита)
    
    ЗаписьXML.ЗаписатьАтрибут(ИмяРеквизита, ЗначениеРеквизита);
    
КонецПроцедуры

// Получить настройки обмена.
// 
// Возвращаемое значение:
//  Структура - содержит имена (ключи) и значения:
//	*КаталогВыгрузки - Строка
//	*ПроизводительБренд - СправочникСсылка.Производители 
//
Функция ПолучитьНастройки() Экспорт

	КлючОбъекта = "SalesWorks";
	КлючНастроек = "НастройкиSalesWorks";
	ИмяПользователя = "Администратор";
	
	Настройки = ХранилищеОбщихНастроек.Загрузить(КлючОбъекта, КлючНастроек, ,ИмяПользователя); 
	
	Если ТипЗнч(Настройки) = Тип("Структура") Тогда
		Возврат Настройки;
	КонецЕсли;
	
КонецФункции
#КонецОбласти

#КонецЕсли